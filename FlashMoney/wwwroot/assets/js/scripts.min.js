/*!
 * sequest-app
 * A Simple SRP (Service Request Platform) Application
 * 
 * @author Terry Pouke
 * @version 0.0.1
 * Copyright 2019.  licensed.
 */

var mPoint = 768;
var actionView = true;
$(function () {

  $(".dropdown-toggle").dropdown();
  $('[data-toggle="tooltip"]').tooltip();

  //Admin Menu
  $(".open-trigger").click(function (e) {
    e.preventDefault();
    if ($(window).width() > 1024) {
      $(".page .sidebar").toggleClass("nav-shrinked");
    } else {
      $(".page .sidebar").toggleClass("nav-opened");
    }
  });

  $(window).resize(function (e) {
    $(".page .sidebar")
      .removeClass("nav-opened")
      .removeClass("nav-shrinked");
  });


  //Landing Form
  setFormPosition();
  setBgPosition();
  $(window).resize(function (e) {
    setFormPosition(); setBgPosition();
  })

  $(window).scroll(function (e) {
    if ($(window).width() > mPoint && $(".home .info .how-info").length > 0) {
      var howTop = $(".home .info .how-info").offset().top - 800;
      var scrollTop = $(window).scrollTop();
      if (scrollTop > howTop) {
        $(".home .auth").css({
          top: (140 + howTop),
          position: "absolute"
        });
      }
      else {
        $(".home .auth").css({
          top: 140,
          position: "fixed"
        });
      }
    }
  })

  //Landing Scroll Btn
  $(".home .intro .btn-round").click(function (e) {
    e.preventDefault();

    var _top = $(".home .info").offset().top + 100;

    $("html,body").animate({
      scrollTop: _top
    })
  })

  //Input Index Adjust
  $(".input.password-check input").focus(function () {
    $(".input").removeClass("elevate");
    $(this).parent().addClass("elevate");
  })


  //Home Form Movement
  $(".form-card .form-link").click(function (e) {
    e.preventDefault();
    e.stopPropagation();

    var idLink = $(this).data("link");
    var option = $(this).data("option");
    $(".form-card .form-section").removeClass("active");
    if (idLink == "alert") {
      $(".form-card .form-section." + idLink).removeClass("success");
      $(".form-card .form-section." + idLink).removeClass("error");
      $(".form-card .form-section." + idLink).addClass("active " + option);
    }
    else if (option == "load") {
      $(".form-card .form-section.loading").addClass("active");
      setTimeout(function (e) {
        $(".form-card .form-section").removeClass("active");
        $(".form-card .form-section." + idLink).addClass("active");
      }, 3000);
    }
    else {
      $(".form-card .form-section." + idLink).addClass("active");
    }
  })


  //Overview Action Toggle
  $(".admin .overview .action-trigger").click(function (e) {
    e.preventDefault();
    if (!actionView) {
      $(this).addClass("hide");
      $(".admin .overview .content-action").removeClass("hide");
    }
    actionView = true;
  })
  $(".admin .overview .content-action .action-close").click(function (e) {
    e.preventDefault();
    if (actionView) {
      $(".admin .overview .content-action").addClass("hide");
      $(".admin .overview .action-trigger").removeClass("hide");
    }
    actionView = false;
  })

  if ($(window).width() <= mPoint) {
    actionView = false;
    $(".admin .overview .action-trigger").removeClass("hide");
    $(".admin .overview .content-action").addClass("hide");
  }

  //Load Overview Charts
  loadCharts();


  //Overview Fund File Upload
  if ($("#modal-fund-trn-multiple")) {
    $(".fund-trn-file-template .select-list .upload-btn").click(function (e) {
      e.preventDefault();
      $(".fund-trn-file-template .file-input").trigger("click");
    })

    $(".fund-trn-file-template .file-input").change(function (e) {
      var file = e.target.files[0];
      if (file.type.match("application.*") || file.type.match("text/css")) {
        $("#modal-fund-trn-multiple .form-card .form-section").removeClass("active");
        $("#modal-fund-trn-multiple .form-card .form-section.loading").addClass("active");

        var _next = $(".fund-trn-file-template .select-list .upload-btn").data("link");

        setTimeout(function () {
          $('#modal-fund-trn-multiple .form-card .form-section').removeClass("active");
          $('#modal-fund-trn-multiple .form-card .form-section.' + _next).addClass("active");
        }, 2500);
      }
    })
  }


  //Modal Dismis Reset
  if ($(".modals").length > 0) {
    $("a[data-dismiss=modal]").click(function (e) {
      $(".form-card .form-section").removeClass("active");
      $(".form-card .form-section[data-default=true]").addClass("active");
    })
  }



  //Setting Load
  setSettingActive();

  //Setting Trans PIN Modal
  $(".settings .empty-info .btn").click(function (e) {
    setTimeout(function (e) {
      $('#modal-setup-transpin .form-card .form-section').removeClass("active");
      $('#modal-setup-transpin .form-card .form-section.setting-transpin-setup').addClass("active");
    }, 2500);
  })


  //Setting KYC Upload
  $(".settings .docs .upload-btn").click(function (e) {
    e.preventDefault();
    var _parent = $(this).parent();
    var _file = _parent.find("input[type=file]");

    $(_file).trigger("click");
  })
  $(".settings .docs .remove-btn").click(function (e) {
    e.preventDefault();
    var _parent = $(this).parent();
    _parent.find("input[type=file]").val("");
    _parent.removeClass("attached");
  })

  $(".settings .docs .image .icon, .settings .avater .image .icon").click(function (e) {
    var _parent = $(this).parent().parent();
    var _file = _parent.find("input[type=file]");

    $(_file).trigger("click");
  })

  $(".settings .docs .item.profile-pic input, .settings .avater input").change(function (e) {
    var file = e.target.files[0];
    if (file.type.match("image.*")) {
      var _parent = $(this).parent().parent();

      var reader = new FileReader();
      reader.onload = function (_file) {
        var dataUrl = _file.target.result;

        _parent.find(".image").attr("style", "background-image: url('" + dataUrl + "')");
      }

      reader.readAsDataURL(file);
    }
  })

  $(".settings .docs .item:not(.profile-pic) input").change(function (e) {
    var file = e.target.files[0];
    if (file.type.match("application.*")) {
      var _parent = $(this).parent().parent();
      var _text = $(this).parent().find(".file");
      _text.html(file.name + " | <em>" + formatSize(file.size) + "</em>");
      _parent.addClass("attached");

    }
  })


  //General PIN Input Movement
  $(".input-pin input").on("input", function (e) {
    $(this).attr("maxlength", "1");
    var _parent = $(this).parent();
    var _index = $(this).index() + 1;
    var _num = 4;
    if (_parent.hasClass("x6")) {
      _num = 6;
    }

    if ($(this).val().length == 1) {
      $(this).blur();

      if (_index < _num) {
        _parent.find("input:nth-child(" + (_index + 1) + ")").focus();
      }
    }
  })

  $(".input-pin input").keyup(function (e) {
    if (e.key.toLowerCase() == "backspace") {
      var _parent = $(this).parent();
      var _index = $(this).index() + 1;

      if ($(this).val().length == 0) {
        $(this).blur();

        if (_index > 1) {
          _parent.find("input:nth-child(" + (_index - 1) + ")").focus();
        }
      }

    }
  })

  formatInput();

  //Password Input Event
  $("form .input.password-check input[type=password]").on("input", function (e) {
    checkPasswordPolicy($(this).val(), $(this));
  })
});

function formatSize(byte) {
  if (byte > 0 && byte < 1000) {
    return byte + "Byte";
  }
  else if (byte >= 1000 && byte < 1000000) {
    return byte / 1000 + "kb";
  }
  else if (byte >= 1000000) {
    return byte / 1000000 + "mb";
  }
  else {
    return "";
  }
}

function getUrlVars() {
  var vars = [], hash;
  var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
  for (var i = 0; i < hashes.length; i++) {
    hash = hashes[i].split('=');
    vars.push(hash[0]);
    vars[hash[0]] = hash[1];
  }
  return vars;
}

function setSettingActive() {
    debugger;
  //Load Set Active Form
  var _activePage = getUrlVars()['p'];
  if (_activePage) {
    //Set Nav Active
    $(".settings .category-nav a").removeClass("active");
    $(".settings .category-nav a").each(function (e) {
      if ($(this).attr("href").includes(_activePage)) {
        $(this).addClass("active");
        return;
      }
    })

    //Set Page Active
    $(".settings .setting-content").hide();
    $(".settings .setting-sect").removeClass("active");
    setTimeout(function () {
      $(".settings .setting-sect#setting-" + _activePage).addClass("active");
      $(".settings .loading").hide();
      $(".settings .setting-content").show();
    }, 2000)

    //Scroll to Tab 
    if ($(window).width() <= mPoint) {
      var _left = $(".settings .category-nav a.active").offset().left - 45;
      $(".settings .category-nav-wrap").animate({
        scrollLeft: _left
      });
    }
  }
  else {
    $(".settings .setting-content").hide();
    $(".settings .setting-sect").removeClass("active");
    setTimeout(function () {
      $(".settings .setting-sect:first-child").addClass("active");
      $(".settings .loading").hide();
      $(".settings .setting-content").show();
    }, 2000)
  }
}

function setFormPosition() {
  if ($(window).width() > mPoint && $(".page > header .links").length > 0) {
    var left = $(".page > header .container").width();
    $(".home .auth").css("right", ($(window).width() - left) / 2);
  }
}

function setBgPosition() {
  if ($(window).width() > mPoint && $(".page > header .links").length > 0) {
    var left = $(".page > header .logo").offset().left;
    $("section.image .cover").css("width", left);
  }
}

function loadCharts() {
  if ($(".overview .usage-card").length > 0) {
    //Globals
    Chart.defaults.global.defaultFontFamily = 'Muli';
    var _opt = {
      responsive: true,
      maintainAspectRatio: true,
      cutoutPercentage: 25,
      legend: {
        display: false
      },
      title: {
        display: false,
      },
    }

    //Pie
    new Chart(document.getElementById("usage-doughnut-ct"), {
      type: 'doughnut',
      data: {
        labels: ["Fund Transfer", "Bills", "Airtime"],
        datasets: [
          {
            label: "Population (millions)",
            backgroundColor: ["#6AC895", "#FF7070", "#FBB700"],
            data: [24, 07, 32]
          }
        ]
      },
      options: _opt
    });
  }

}

function formatInput() {

    //var cleave = new Cleave("#examdate", {

    //    delimiters: ['/', '/', ' ', ':'],
    //    blocks: [2, 2, 4, 2, 2]
    //});

  //Credit Cards 
  $("form input.credit-card").each(function (index) {
    $(this).attr("id", "cleave-card-" + index);
    var cleave = new Cleave("#cleave-card-" + index, {
      creditCard: true,
    });
  });
  //Dates
    $("form input.date").each(function (index) {
    //  debugger
    $(this).attr("id", "cleave-date-" + index);
    var cleave = new Cleave("#cleave-date-" + index, {
      date: true,
      datePattern: ["d", "m", "Y"]
    });
  });
    $("form input.date#examdate").each(function (index) {
        debugger
   // $(this).attr("id", "cleave-date-" + index);
   var cleave = new Cleave("#examdate", {

        delimiters: ['/', '/', ' ', ':'],
        blocks: [2, 2, 4, 2, 2]
    });

  });
  //Expiration
  $("form input.expire").each(function (index) {
    $(this).attr("id", "cleave-expire-" + index);
    var cleave = new Cleave("#cleave-expire-" + index, {
      date: true,
      datePattern: ["m", "Y"]
    });
  });

  //Phone 
  $("form input.tel").each(function (index) {
    $(this).attr("id", "cleave-tel-" + index);
    var cleave = new Cleave("#cleave-tel-" + index, {
      blocks: [4, 3, 4],
    });
  });

  //Currency 
  $("form input.currency").each(function (index) {
    $(this).attr("id", "cleave-currency-" + index);
    var cleave = new Cleave("#cleave-currency-" + index, {
      numeral: true,
      numeralThousandsGroupStyle: "thousand"
    });
  });
}

function checkPasswordPolicy(password, input) {
  var score = 0;
  var checker = $(input).siblings(".checker");
  $(checker).find(".item").removeClass("checked");

  if (password && password.length >= 8) {
    $(checker).find(".item:nth-child(1)").addClass("checked");
    score++;
  }
  else {
    $(checker).find(".item:nth-child(1)").removeClass("checked");
    score--;
  }

  if (password && password.match(/[a-z]/)) {
    $(checker).find(".item:nth-child(2)").addClass("checked");
    score++;
  }
  else {
    $(checker).find(".item:nth-child(2)").removeClass("checked");
    score--;
  }

  if (password && password.match(/\d+/)) {
    $(checker).find(".item:nth-child(3)").addClass("checked");
    score++;
  }
  else {
    $(checker).find(".item:nth-child(3)").removeClass("checked");
    score--;
  }

  // If the password length is greater than 8 and must contain alphabets,numbers and special characters
  if (password && password.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/)) {
    $(checker).find(".item:nth-child(4)").addClass("checked");
    score++;
  }
  else {
    $(checker).find(".item:nth-child(4)").removeClass("checked");
    score--;
  }

  if (score == 4) {
    $(input).attr("data-valid", "true");
  } else {
    $(input).removeAttr("data-valid");
  }

}


/*!
 Questions
 */



jQuery('.mm-prev-btn').hide();

	var x;
	var count;
	var current;
	var percent;
	var z = [];

	init();
	getCurrentSlide();
	goToNext();
	goToPrev();
	getCount();
	// checkStatus();
	// buttonConfig();
	buildStatus();
	deliverStatus();
	submitData();
	goBack();

	function init() {
		
		jQuery('.mm-survey-container .mm-survey-page').each(function() {

			var item;
			var page;

			item = jQuery(this);
			page = item.data('page');

			item.addClass('mm-page-'+page);
			//item.html(page);

		});

	}

	function getCount() {

		count = jQuery('.mm-survey-page').length;
		return count;

	}

	function goToNext() {

		jQuery('.mm-next-btn').on('click', function() {
			goToSlide(x);
			getCount();
			current = x + 1;
			var g = current/count;
			buildProgress(g);
			var y = (count + 1);
			getButtons();
			jQuery('.mm-survey-page').removeClass('active');
			jQuery('.mm-page-'+current).addClass('active');
			getCurrentSlide();
			checkStatus();
			if( jQuery('.mm-page-'+count).hasClass('active') ){
				if( jQuery('.mm-page-'+count).hasClass('pass') ) {
					jQuery('.mm-finish-btn').addClass('active');
				}
				else {
					jQuery('.mm-page-'+count+' .mm-survery-content .mm-survey-item').on('click', function() {
						jQuery('.mm-finish-btn').addClass('active');
					});
				}
			}
			else {
				jQuery('.mm-finish-btn').removeClass('active');
				if( jQuery('.mm-page-'+current).hasClass('pass') ) {
					jQuery('.mm-survey-container').addClass('good');
					jQuery('.mm-survey').addClass('okay');
				}
				else {
					jQuery('.mm-survey-container').removeClass('good');
					jQuery('.mm-survey').removeClass('okay');
				}
			}
			buttonConfig();
		});

	}

	function goToPrev() {

		jQuery('.mm-prev-btn').on('click', function() {
			goToSlide(x);
			getCount();			
			current = (x - 1);
			var g = current/count;
			buildProgress(g);
			var y = count;
			getButtons();
			jQuery('.mm-survey-page').removeClass('active');
			jQuery('.mm-page-'+current).addClass('active');
			getCurrentSlide();
			checkStatus();
			jQuery('.mm-finish-btn').removeClass('active');
			if( jQuery('.mm-page-'+current).hasClass('pass') ) {
				jQuery('.mm-survey-container').addClass('good');
				jQuery('.mm-survey').addClass('okay');
			}
			else {
				jQuery('.mm-survey-container').removeClass('good');
				jQuery('.mm-survey').removeClass('okay');
			}
			buttonConfig();
		});

	}

	function buildProgress(g) {

		if(g > 1){
			g = g - 1;
		}
		else if (g === 0) {
			g = 1;
		}
		g = g * 100;
		jQuery('.mm-survey-progress-bar').css({ 'width' : g+'%' });

	}

	function goToSlide(x) {

		return x;

	}

	function getCurrentSlide() {

		jQuery('.mm-survey-page').each(function() {

			var item;

			item = jQuery(this);

			if( jQuery(item).hasClass('active') ) {
				x = item.data('page');
			}
			else {
				
			}

			return x;

		});

	}

	function getButtons() {

		if(current === 0) {
			current = y;
		}
		if(current === count) {
			jQuery('.mm-next-btn').hide();
		}
		else if(current === 1) {
			jQuery('.mm-prev-btn').hide();
		}
		else {
			jQuery('.mm-next-btn').show();
			jQuery('.mm-prev-btn').show();
		}

	}

	jQuery('.mm-survey-q li input').each(function() {

		var item;
		item = jQuery(this);

		jQuery(item).on('click', function() {
			if( jQuery('input:checked').length > 0 ) {
		    	// console.log(item.val());
		    	jQuery('label').parent().removeClass('active');
		    	item.closest( 'li' ).addClass('active');
			}
			else {
				//
			}
		});

	});

	percent = (x/count) * 100;
	jQuery('.mm-survey-progress-bar').css({ 'width' : percent+'%' });

	function checkStatus() {
		jQuery('.mm-survery-content .mm-survey-item').on('click', function() {
			var item;
			item = jQuery(this);
			item.closest('.mm-survey-page').addClass('pass');
		});
	}

	function buildStatus() {
		jQuery('.mm-survery-content .mm-survey-item').on('click', function() {
			var item;
			item = jQuery(this);
			item.addClass('bingo');
			item.closest('.mm-survey-page').addClass('pass');
			jQuery('.mm-survey-container').addClass('good');
		});
	}

	function deliverStatus() {
		jQuery('.mm-survey-item').on('click', function() {
			if( jQuery('.mm-survey-container').hasClass('good') ){
				jQuery('.mm-survey').addClass('okay');
			}
			else {
				jQuery('.mm-survey').removeClass('okay');	
			}
			buttonConfig();
		});
	}

	function lastPage() {
		if( jQuery('.mm-next-btn').hasClass('cool') ) {
			alert('cool');
		}
	}

	function buttonConfig() {
		if( jQuery('.mm-survey').hasClass('okay') ) {
			jQuery('.mm-next-btn button').prop('disabled', false);
		}
		else {
			jQuery('.mm-next-btn button').prop('disabled', true);
		}
	}

	function submitData() {
		jQuery('.mm-finish-btn').on('click', function() {
			collectData();
			jQuery('.mm-survey-bottom').slideUp();
			jQuery('.mm-survey-results').slideDown();
		});
	}

	function collectData() {
		
		var map = {};
		var ax = ['0','red','mercedes','3.14','3'];
		var answer = '';
		var total = 0;
		var ttl = 0;
		var g;
		var c = 0;

		jQuery('.mm-survey-item input:checked').each(function(index, val) {
			var item;
			var data;
			var name;
			var n;

			item = jQuery(this);
			data = item.val();
			name = item.data('item');
			n = parseInt(data);
			total += n;

			map[name] = data;

		});

		jQuery('.mm-survey-results-container .mm-survey-results-list').html('');

		for (i = 1; i <= count; i++) {

			var t = {};
			var m = {};
			answer += map[i] + '<br>';
			
			if( map[i] === ax[i]) {
				g = map[i];
				p = 'correct';
				c = 1;
			}
			else {
				g = map[i];
				p = 'incorrect';
				c = 0;
			}

			jQuery('.mm-survey-results-list').append('<li class="mm-survey-results-item '+p+'"><span class="mm-item-number">'+i+'</span><span class="mm-item-info">'+g+' - '+p+'</span></li>');

			m[i] = c;
			ttl += m[i];

		}

		var results;
		results = ( ( ttl / count ) * 100 ).toFixed(0);

		jQuery('.mm-survey-results-score').html( results + '%' );

	}

	function goBack() {
		jQuery('.mm-back-btn').on('click', function() {
			jQuery('.mm-survey-bottom').slideDown();
			jQuery('.mm-survey-results').slideUp();
		});
  }
  
  $('#chooseFile#cs2').bind('change', function () {
    var filename = $("#chooseFile#cs2").val();
    if (/^\s*$/.test(filename)) {
      $(".file-upload.fp2").removeClass('active');
      $("#noFile#nf2").text("No file chosen..."); 
    }
    else {
      $(".file-upload.fp2").addClass('active');
      $("#noFile.nf2").text(filename.replace("C:\\fakepath\\", "")); 
    }
  });

$('#chooseFile#cf1').bind('change', function () {
    debugger
    var filename = $("#cf1").val();
    if (/^\s*$/.test(filename)) {
      $(".fp1").removeClass('active');
      $("#nf1").text("No file chosen..."); 
    }
    else {
      $(".fp1").addClass('active');
      $("#noFile1").text(filename.replace("C:\\fakepath\\", "")); 
    }
  });










/*!
 Timer
 */


  var minutes = $( '#set-time' ).val();

var target_date = new Date().getTime() + ((minutes * 60 ) * 1000); // set the countdown date
var time_limit = ((minutes * 60 ) * 1000);
//set actual timer
// setTimeout(
//   function() 
//   {
//     alert( 'done' );
//   }, time_limit );

var days, hours, minutes, seconds; // variables for time units

var countdown = document.getElementById("tiles"); // get tag element

getCountdown();

setInterval(function () { getCountdown(); }, 1000);

function getCountdown(){

	// find the amount of "seconds" between now and target
	var current_date = new Date().getTime();
	var seconds_left = (target_date - current_date) / 1000;
  
if ( seconds_left >= 0 ) {
  console.log(time_limit);
   if ( (seconds_left * 1000 ) < ( time_limit / 2 ) )  {
     $( '#tiles' ).removeClass('color-full');
     $( '#tiles' ).addClass('color-half');

	} 
    if ( (seconds_left * 1000 ) < ( time_limit / 4 ) )  {
    	$( '#tiles' ).removeClass('color-half');
    	$( '#tiles' ).addClass('color-empty');
    }
  
	days = pad( parseInt(seconds_left / 86400) );
	seconds_left = seconds_left % 86400;
		 
	hours = pad( parseInt(seconds_left / 3600) );
	seconds_left = seconds_left % 3600;
		  
	minutes = pad( parseInt(seconds_left / 60) );
	seconds = pad( parseInt( seconds_left % 60 ) );

	// format countdown string + set tag value
	countdown.innerHTML = "<span>" + hours + ":</span><span>" + minutes + ":</span><span>" + seconds + "</span>"; 
  

  
}
   
  
  
}

function pad(n) {
	return (n < 10 ? '0' : '') + n;
}



/* payment */

// this needs to be in a file somewhere and called on to the page. easy peasy. call the file "jquery.card.js"
! function(e) {
  if ("object" == typeof exports) module.exports = e();
  else if ("function" == typeof define && define.amd) define(e);
  else {
    var f;
    "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.card = e()
  }
}(function() {
  var define, module, exports;
  return (function e(t, n, r) {
      function s(o, u) {
        if (!n[o]) {
          if (!t[o]) {
            var a = typeof require == "function" && require;
            if (!u && a) return a(o, !0);
            if (i) return i(o, !0);
            throw new Error("Cannot find module '" + o + "'")
          }
          var f = n[o] = {
            exports: {}
          };
          t[o][0].call(f.exports, function(e) {
            var n = t[o][1][e];
            return s(n ? n : e)
          }, f, f.exports, e, t, n, r)
        }
        return n[o].exports
      }
      var i = typeof require == "function" && require;
      for (var o = 0; o < r.length; o++) s(r[o]);
      return s
    })({
      1: [function(_dereq_, module, exports) {
        module.exports = _dereq_('./lib/extend');

      }, {
        "./lib/extend": 2
      }],
      2: [function(_dereq_, module, exports) {
        /*!
         * node.extend
         * Copyright 2011, John Resig
         * Dual licensed under the MIT or GPL Version 2 licenses.
         * http://jquery.org/license
         *
         * @fileoverview
         * Port of jQuery.extend that actually works on node.js
         */
        var is = _dereq_('is');

        function extend() {
          var target = arguments[0] || {};
          var i = 1;
          var length = arguments.length;
          var deep = false;
          var options, name, src, copy, copy_is_array, clone;

          // Handle a deep copy situation
          if (typeof target === 'boolean') {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
          }

          // Handle case when target is a string or something (possible in deep copy)
          if (typeof target !== 'object' && !is.fn(target)) {
            target = {};
          }

          for (; i < length; i++) {
            // Only deal with non-null/undefined values
            options = arguments[i]
            if (options != null) {
              if (typeof options === 'string') {
                options = options.split('');
              }
              // Extend the base object
              for (name in options) {
                src = target[name];
                copy = options[name];

                // Prevent never-ending loop
                if (target === copy) {
                  continue;
                }

                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
                  if (copy_is_array) {
                    copy_is_array = false;
                    clone = src && is.array(src) ? src : [];
                  } else {
                    clone = src && is.hash(src) ? src : {};
                  }

                  // Never move original objects, clone them
                  target[name] = extend(deep, clone, copy);

                  // Don't bring in undefined values
                } else if (typeof copy !== 'undefined') {
                  target[name] = copy;
                }
              }
            }
          }

          // Return the modified object
          return target;
        };

        /**
         * @public
         */
        extend.version = '1.0.8';

        /**
         * Exports module.
         */
        module.exports = extend;

      }, {
        "is": 3
      }],
      3: [function(_dereq_, module, exports) {

        /**!
         * is
         * the definitive JavaScript type testing library
         *
         * @copyright 2013-2014 Enrico Marino / Jordan Harband
         * @license MIT
         */

        var objProto = Object.prototype;
        var owns = objProto.hasOwnProperty;
        var toString = objProto.toString;
        var isActualNaN = function(value) {
          return value !== value;
        };
        var NON_HOST_TYPES = {
          boolean: 1,
          number: 1,
          string: 1,
          undefined: 1
        };

        var base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
        var hexRegex = /^[A-Fa-f0-9]+$/;

        /**
         * Expose `is`
         */

        var is = module.exports = {};

        /**
         * Test general.
         */

        /**
         * is.type
         * Test if `value` is a type of `type`.
         *
         * @param {Mixed} value value to test
         * @param {String} type type
         * @return {Boolean} true if `value` is a type of `type`, false otherwise
         * @api public
         */

        is.a = is.type = function(value, type) {
          return typeof value === type;
        };

        /**
         * is.defined
         * Test if `value` is defined.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if 'value' is defined, false otherwise
         * @api public
         */

        is.defined = function(value) {
          return typeof value !== 'undefined';
        };

        /**
         * is.empty
         * Test if `value` is empty.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is empty, false otherwise
         * @api public
         */

        is.empty = function(value) {
          var type = toString.call(value);
          var key;

          if ('[object Array]' === type || '[object Arguments]' === type || '[object String]' === type) {
            return value.length === 0;
          }

          if ('[object Object]' === type) {
            for (key in value) {
              if (owns.call(value, key)) {
                return false;
              }
            }
            return true;
          }

          return false;
        };

        /**
         * is.equal
         * Test if `value` is equal to `other`.
         *
         * @param {Mixed} value value to test
         * @param {Mixed} other value to compare with
         * @return {Boolean} true if `value` is equal to `other`, false otherwise
         */

        is.equal = function(value, other) {
          var strictlyEqual = value === other;
          if (strictlyEqual) {
            return true;
          }

          var type = toString.call(value);
          var key;

          if (type !== toString.call(other)) {
            return false;
          }

          if ('[object Object]' === type) {
            for (key in value) {
              if (!is.equal(value[key], other[key]) || !(key in other)) {
                return false;
              }
            }
            for (key in other) {
              if (!is.equal(value[key], other[key]) || !(key in value)) {
                return false;
              }
            }
            return true;
          }

          if ('[object Array]' === type) {
            key = value.length;
            if (key !== other.length) {
              return false;
            }
            while (--key) {
              if (!is.equal(value[key], other[key])) {
                return false;
              }
            }
            return true;
          }

          if ('[object Function]' === type) {
            return value.prototype === other.prototype;
          }

          if ('[object Date]' === type) {
            return value.getTime() === other.getTime();
          }

          return strictlyEqual;
        };

        /**
         * is.hosted
         * Test if `value` is hosted by `host`.
         *
         * @param {Mixed} value to test
         * @param {Mixed} host host to test with
         * @return {Boolean} true if `value` is hosted by `host`, false otherwise
         * @api public
         */

        is.hosted = function(value, host) {
          var type = typeof host[value];
          return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];
        };

        /**
         * is.instance
         * Test if `value` is an instance of `constructor`.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an instance of `constructor`
         * @api public
         */

        is.instance = is['instanceof'] = function(value, constructor) {
          return value instanceof constructor;
        };

        /**
         * is.nil / is.null
         * Test if `value` is null.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is null, false otherwise
         * @api public
         */

        is.nil = is['null'] = function(value) {
          return value === null;
        };

        /**
         * is.undef / is.undefined
         * Test if `value` is undefined.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is undefined, false otherwise
         * @api public
         */

        is.undef = is['undefined'] = function(value) {
          return typeof value === 'undefined';
        };

        /**
         * Test arguments.
         */

        /**
         * is.args
         * Test if `value` is an arguments object.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an arguments object, false otherwise
         * @api public
         */

        is.args = is['arguments'] = function(value) {
          var isStandardArguments = '[object Arguments]' === toString.call(value);
          var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
          return isStandardArguments || isOldArguments;
        };

        /**
         * Test array.
         */

        /**
         * is.array
         * Test if 'value' is an array.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an array, false otherwise
         * @api public
         */

        is.array = function(value) {
          return '[object Array]' === toString.call(value);
        };

        /**
         * is.arguments.empty
         * Test if `value` is an empty arguments object.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an empty arguments object, false otherwise
         * @api public
         */
        is.args.empty = function(value) {
          return is.args(value) && value.length === 0;
        };

        /**
         * is.array.empty
         * Test if `value` is an empty array.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an empty array, false otherwise
         * @api public
         */
        is.array.empty = function(value) {
          return is.array(value) && value.length === 0;
        };

        /**
         * is.arraylike
         * Test if `value` is an arraylike object.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an arguments object, false otherwise
         * @api public
         */

        is.arraylike = function(value) {
          return !!value && !is.boolean(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0;
        };

        /**
         * Test boolean.
         */

        /**
         * is.boolean
         * Test if `value` is a boolean.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a boolean, false otherwise
         * @api public
         */

        is.boolean = function(value) {
          return '[object Boolean]' === toString.call(value);
        };

        /**
         * is.false
         * Test if `value` is false.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is false, false otherwise
         * @api public
         */

        is['false'] = function(value) {
          return is.boolean(value) && Boolean(Number(value)) === false;
        };

        /**
         * is.true
         * Test if `value` is true.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is true, false otherwise
         * @api public
         */

        is['true'] = function(value) {
          return is.boolean(value) && Boolean(Number(value)) === true;
        };

        /**
         * Test date.
         */

        /**
         * is.date
         * Test if `value` is a date.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a date, false otherwise
         * @api public
         */

        is.date = function(value) {
          return '[object Date]' === toString.call(value);
        };

        /**
         * Test element.
         */

        /**
         * is.element
         * Test if `value` is an html element.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an HTML Element, false otherwise
         * @api public
         */

        is.element = function(value) {
          return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1;
        };

        /**
         * Test error.
         */

        /**
         * is.error
         * Test if `value` is an error object.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an error object, false otherwise
         * @api public
         */

        is.error = function(value) {
          return '[object Error]' === toString.call(value);
        };

        /**
         * Test function.
         */

        /**
         * is.fn / is.function (deprecated)
         * Test if `value` is a function.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a function, false otherwise
         * @api public
         */

        is.fn = is['function'] = function(value) {
          var isAlert = typeof window !== 'undefined' && value === window.alert;
          return isAlert || '[object Function]' === toString.call(value);
        };

        /**
         * Test number.
         */

        /**
         * is.number
         * Test if `value` is a number.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a number, false otherwise
         * @api public
         */

        is.number = function(value) {
          return '[object Number]' === toString.call(value);
        };

        /**
         * is.infinite
         * Test if `value` is positive or negative infinity.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
         * @api public
         */
        is.infinite = function(value) {
          return value === Infinity || value === -Infinity;
        };

        /**
         * is.decimal
         * Test if `value` is a decimal number.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a decimal number, false otherwise
         * @api public
         */

        is.decimal = function(value) {
          return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;
        };

        /**
         * is.divisibleBy
         * Test if `value` is divisible by `n`.
         *
         * @param {Number} value value to test
         * @param {Number} n dividend
         * @return {Boolean} true if `value` is divisible by `n`, false otherwise
         * @api public
         */

        is.divisibleBy = function(value, n) {
          var isDividendInfinite = is.infinite(value);
          var isDivisorInfinite = is.infinite(n);
          var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
          return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);
        };

        /**
         * is.int
         * Test if `value` is an integer.
         *
         * @param value to test
         * @return {Boolean} true if `value` is an integer, false otherwise
         * @api public
         */

        is.int = function(value) {
          return is.number(value) && !isActualNaN(value) && value % 1 === 0;
        };

        /**
         * is.maximum
         * Test if `value` is greater than 'others' values.
         *
         * @param {Number} value value to test
         * @param {Array} others values to compare with
         * @return {Boolean} true if `value` is greater than `others` values
         * @api public
         */

        is.maximum = function(value, others) {
          if (isActualNaN(value)) {
            throw new TypeError('NaN is not a valid value');
          } else if (!is.arraylike(others)) {
            throw new TypeError('second argument must be array-like');
          }
          var len = others.length;

          while (--len >= 0) {
            if (value < others[len]) {
              return false;
            }
          }

          return true;
        };

        /**
         * is.minimum
         * Test if `value` is less than `others` values.
         *
         * @param {Number} value value to test
         * @param {Array} others values to compare with
         * @return {Boolean} true if `value` is less than `others` values
         * @api public
         */

        is.minimum = function(value, others) {
          if (isActualNaN(value)) {
            throw new TypeError('NaN is not a valid value');
          } else if (!is.arraylike(others)) {
            throw new TypeError('second argument must be array-like');
          }
          var len = others.length;

          while (--len >= 0) {
            if (value > others[len]) {
              return false;
            }
          }

          return true;
        };

        /**
         * is.nan
         * Test if `value` is not a number.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is not a number, false otherwise
         * @api public
         */

        is.nan = function(value) {
          return !is.number(value) || value !== value;
        };

        /**
         * is.even
         * Test if `value` is an even number.
         *
         * @param {Number} value value to test
         * @return {Boolean} true if `value` is an even number, false otherwise
         * @api public
         */

        is.even = function(value) {
          return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);
        };

        /**
         * is.odd
         * Test if `value` is an odd number.
         *
         * @param {Number} value value to test
         * @return {Boolean} true if `value` is an odd number, false otherwise
         * @api public
         */

        is.odd = function(value) {
          return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);
        };

        /**
         * is.ge
         * Test if `value` is greater than or equal to `other`.
         *
         * @param {Number} value value to test
         * @param {Number} other value to compare with
         * @return {Boolean}
         * @api public
         */

        is.ge = function(value, other) {
          if (isActualNaN(value) || isActualNaN(other)) {
            throw new TypeError('NaN is not a valid value');
          }
          return !is.infinite(value) && !is.infinite(other) && value >= other;
        };

        /**
         * is.gt
         * Test if `value` is greater than `other`.
         *
         * @param {Number} value value to test
         * @param {Number} other value to compare with
         * @return {Boolean}
         * @api public
         */

        is.gt = function(value, other) {
          if (isActualNaN(value) || isActualNaN(other)) {
            throw new TypeError('NaN is not a valid value');
          }
          return !is.infinite(value) && !is.infinite(other) && value > other;
        };

        /**
         * is.le
         * Test if `value` is less than or equal to `other`.
         *
         * @param {Number} value value to test
         * @param {Number} other value to compare with
         * @return {Boolean} if 'value' is less than or equal to 'other'
         * @api public
         */

        is.le = function(value, other) {
          if (isActualNaN(value) || isActualNaN(other)) {
            throw new TypeError('NaN is not a valid value');
          }
          return !is.infinite(value) && !is.infinite(other) && value <= other;
        };

        /**
         * is.lt
         * Test if `value` is less than `other`.
         *
         * @param {Number} value value to test
         * @param {Number} other value to compare with
         * @return {Boolean} if `value` is less than `other`
         * @api public
         */

        is.lt = function(value, other) {
          if (isActualNaN(value) || isActualNaN(other)) {
            throw new TypeError('NaN is not a valid value');
          }
          return !is.infinite(value) && !is.infinite(other) && value < other;
        };

        /**
         * is.within
         * Test if `value` is within `start` and `finish`.
         *
         * @param {Number} value value to test
         * @param {Number} start lower bound
         * @param {Number} finish upper bound
         * @return {Boolean} true if 'value' is is within 'start' and 'finish'
         * @api public
         */
        is.within = function(value, start, finish) {
          if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
            throw new TypeError('NaN is not a valid value');
          } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
            throw new TypeError('all arguments must be numbers');
          }
          var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
          return isAnyInfinite || (value >= start && value <= finish);
        };

        /**
         * Test object.
         */

        /**
         * is.object
         * Test if `value` is an object.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is an object, false otherwise
         * @api public
         */

        is.object = function(value) {
          return '[object Object]' === toString.call(value);
        };



        /**
         * is.hash
         * Test if `value` is a hash - a plain object literal.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a hash, false otherwise
         * @api public
         */

        is.hash = function(value) {
          return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;
        };

        /**
         * Test regexp.
         */

        /**
         * is.regexp
         * Test if `value` is a regular expression.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if `value` is a regexp, false otherwise
         * @api public
         */

        is.regexp = function(value) {
          return '[object RegExp]' === toString.call(value);
        };

        /**
         * Test string.
         */

        /**
         * is.string
         * Test if `value` is a string.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if 'value' is a string, false otherwise
         * @api public
         */

        is.string = function(value) {
          return '[object String]' === toString.call(value);
        };

        /**
         * Test base64 string.
         */

        /**
         * is.base64
         * Test if `value` is a valid base64 encoded string.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
         * @api public
         */

        is.base64 = function(value) {
          return is.string(value) && (!value.length || base64Regex.test(value));
        };

        /**
         * Test base64 string.
         */

        /**
         * is.hex
         * Test if `value` is a valid hex encoded string.
         *
         * @param {Mixed} value value to test
         * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
         * @api public
         */

        is.hex = function(value) {
          return is.string(value) && (!value.length || hexRegex.test(value));
        };

      }, {}],
      4: [function(_dereq_, module, exports) {
        (function(global) {
          ! function(e) {
            if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
            else if ("function" == typeof define && define.amd) define([], e);
            else {
              var f;
              "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), (f.qj || (f.qj = {})).js = e()
            }
          }(function() {
            var define, module, exports;
            return (function e(t, n, r) {
                function s(o, u) {
                  if (!n[o]) {
                    if (!t[o]) {
                      var a = typeof _dereq_ == "function" && _dereq_;
                      if (!u && a) return a(o, !0);
                      if (i) return i(o, !0);
                      throw new Error("Cannot find module '" + o + "'")
                    }
                    var f = n[o] = {
                      exports: {}
                    };
                    t[o][0].call(f.exports, function(e) {
                      var n = t[o][1][e];
                      return s(n ? n : e)
                    }, f, f.exports, e, t, n, r)
                  }
                  return n[o].exports
                }
                var i = typeof _dereq_ == "function" && _dereq_;
                for (var o = 0; o < r.length; o++) s(r[o]);
                return s
              })({
                1: [function(_dereq_, module, exports) {
                  var QJ, rreturn, rtrim;

                  QJ = function(selector) {
                    if (QJ.isDOMElement(selector)) {
                      return selector;
                    }
                    return document.querySelectorAll(selector);
                  };

                  QJ.isDOMElement = function(el) {
                    return el && (el.nodeName != null);
                  };

                  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

                  QJ.trim = function(text) {
                    if (text === null) {
                      return "";
                    } else {
                      return (text + "").replace(rtrim, "");
                    }
                  };

                  rreturn = /\r/g;

                  QJ.val = function(el, val) {
                    var ret;
                    if (arguments.length > 1) {
                      return el.value = val;
                    } else {
                      ret = el.value;
                      if (typeof ret === "string") {
                        return ret.replace(rreturn, "");
                      } else {
                        if (ret === null) {
                          return "";
                        } else {
                          return ret;
                        }
                      }
                    }
                  };

                  QJ.preventDefault = function(eventObject) {
                    if (typeof eventObject.preventDefault === "function") {
                      eventObject.preventDefault();
                      return;
                    }
                    eventObject.returnValue = false;
                    return false;
                  };

                  QJ.normalizeEvent = function(e) {
                    var original;
                    original = e;
                    e = {
                      which: original.which != null ? original.which : void 0,
                      target: original.target || original.srcElement,
                      preventDefault: function() {
                        return QJ.preventDefault(original);
                      },
                      originalEvent: original,
                      data: original.data || original.detail
                    };
                    if (e.which == null) {
                      e.which = original.charCode != null ? original.charCode : original.keyCode;
                    }
                    return e;
                  };

                  QJ.on = function(element, eventName, callback) {
                    var el, multEventName, originalCallback, _i, _j, _len, _len1, _ref;
                    if (element.length) {
                      for (_i = 0, _len = element.length; _i < _len; _i++) {
                        el = element[_i];
                        QJ.on(el, eventName, callback);
                      }
                      return;
                    }
                    if (eventName.match(" ")) {
                      _ref = eventName.split(" ");
                      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        multEventName = _ref[_j];
                        QJ.on(element, multEventName, callback);
                      }
                      return;
                    }
                    originalCallback = callback;
                    callback = function(e) {
                      e = QJ.normalizeEvent(e);
                      return originalCallback(e);
                    };
                    if (element.addEventListener) {
                      return element.addEventListener(eventName, callback, false);
                    }
                    if (element.attachEvent) {
                      eventName = "on" + eventName;
                      return element.attachEvent(eventName, callback);
                    }
                    element['on' + eventName] = callback;
                  };

                  QJ.addClass = function(el, className) {
                    var e;
                    if (el.length) {
                      return (function() {
                        var _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = el.length; _i < _len; _i++) {
                          e = el[_i];
                          _results.push(QJ.addClass(e, className));
                        }
                        return _results;
                      })();
                    }
                    if (el.classList) {
                      return el.classList.add(className);
                    } else {
                      return el.className += ' ' + className;
                    }
                  };

                  QJ.hasClass = function(el, className) {
                    var e, hasClass, _i, _len;
                    if (el.length) {
                      hasClass = true;
                      for (_i = 0, _len = el.length; _i < _len; _i++) {
                        e = el[_i];
                        hasClass = hasClass && QJ.hasClass(e, className);
                      }
                      return hasClass;
                    }
                    if (el.classList) {
                      return el.classList.contains(className);
                    } else {
                      return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
                    }
                  };

                  QJ.removeClass = function(el, className) {
                    var cls, e, _i, _len, _ref, _results;
                    if (el.length) {
                      return (function() {
                        var _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = el.length; _i < _len; _i++) {
                          e = el[_i];
                          _results.push(QJ.removeClass(e, className));
                        }
                        return _results;
                      })();
                    }
                    if (el.classList) {
                      _ref = className.split(' ');
                      _results = [];
                      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        cls = _ref[_i];
                        _results.push(el.classList.remove(cls));
                      }
                      return _results;
                    } else {
                      return el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                    }
                  };

                  QJ.toggleClass = function(el, className, bool) {
                    var e;
                    if (el.length) {
                      return (function() {
                        var _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = el.length; _i < _len; _i++) {
                          e = el[_i];
                          _results.push(QJ.toggleClass(e, className, bool));
                        }
                        return _results;
                      })();
                    }
                    if (bool) {
                      if (!QJ.hasClass(el, className)) {
                        return QJ.addClass(el, className);
                      }
                    } else {
                      return QJ.removeClass(el, className);
                    }
                  };

                  QJ.append = function(el, toAppend) {
                    var e;
                    if (el.length) {
                      return (function() {
                        var _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = el.length; _i < _len; _i++) {
                          e = el[_i];
                          _results.push(QJ.append(e, toAppend));
                        }
                        return _results;
                      })();
                    }
                    return el.insertAdjacentHTML('beforeend', toAppend);
                  };

                  QJ.find = function(el, selector) {
                    if (el instanceof NodeList || el instanceof Array) {
                      el = el[0];
                    }
                    return el.querySelectorAll(selector);
                  };

                  QJ.trigger = function(el, name, data) {
                    var e, ev;
                    try {
                      ev = new CustomEvent(name, {
                        detail: data
                      });
                    } catch (_error) {
                      e = _error;
                      ev = document.createEvent('CustomEvent');
                      if (ev.initCustomEvent) {
                        ev.initCustomEvent(name, true, true, data);
                      } else {
                        ev.initEvent(name, true, true, data);
                      }
                    }
                    return el.dispatchEvent(ev);
                  };

                  module.exports = QJ;

                }, {}]
              }, {}, [1])
              (1)
          });
        }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
      }, {}],
      5: [function(_dereq_, module, exports) {
        module.exports = _dereq_('cssify');
      }, {
        "cssify": 6
      }],
      6: [function(_dereq_, module, exports) {
        module.exports = function(css, customDocument) {
          var doc = customDocument || document;
          if (doc.createStyleSheet) {
            doc.createStyleSheet().cssText = css;
          } else {
            var head = doc.getElementsByTagName('head')[0],
              style = doc.createElement('style');

            style.type = 'text/css';

            if (style.styleSheet) {
              style.styleSheet.cssText = css;
            } else {
              style.appendChild(doc.createTextNode(css));
            }

            head.appendChild(style);
          }
        };

        module.exports.byUrl = function(url) {
          if (document.createStyleSheet) {
            document.createStyleSheet(url);
          } else {
            var head = document.getElementsByTagName('head')[0],
              link = document.createElement('link');

            link.rel = 'stylesheet';
            link.href = url;

            head.appendChild(link);
          }
        };

      }, {}],
      7: [function(_dereq_, module, exports) {
        (function(global) {
          var Card, QJ, extend, payment;

          _dereq_('../scss/card.scss');

          QJ = _dereq_('qj');

          payment = _dereq_('./payment/src/payment.coffee');

          extend = _dereq_('node.extend');

          Card = (function() {
            var bindVal;

            Card.prototype.cardTemplate = '' + '<div class="jp-card-container">' + '<div class="jp-card">' + '<div class="jp-card-front">' + '<div class="jp-card-logo jp-card-visa">visa</div>' + '<div class="jp-card-logo jp-card-mastercard">MasterCard</div>' + '<div class="jp-card-logo jp-card-maestro">Maestro</div>' + '<div class="jp-card-logo jp-card-amex"></div>' + '<div class="jp-card-logo jp-card-discover">discover</div>' + '<div class="jp-card-logo jp-card-dankort"><div class="dk"><div class="d"></div><div class="k"></div></div></div>' + '<div class="jp-card-lower">' + '<div class="jp-card-shiny"></div>' + '<div class="jp-card-cvc jp-card-display">{{cvc}}</div>' + '<div class="jp-card-number jp-card-display">{{number}}</div>' + '<div class="jp-card-name jp-card-display">{{name}}</div>' + '<div class="jp-card-expiry jp-card-display" data-before="{{monthYear}}" data-after="{{validDate}}">{{expiry}}</div>' + '</div>' + '</div>' + '<div class="jp-card-back">' + '<div class="jp-card-bar"></div>' + '<div class="jp-card-cvc jp-card-display">{{cvc}}</div>' + '<div class="jp-card-shiny"></div>' + '</div>' + '</div>' + '</div>';

            Card.prototype.template = function(tpl, data) {
              return tpl.replace(/\{\{(.*?)\}\}/g, function(match, key, str) {
                return data[key];
              });
            };

            Card.prototype.cardTypes = ['jp-card-amex', 'jp-card-dankort', 'jp-card-dinersclub', 'jp-card-discover', 'jp-card-jcb', 'jp-card-laser', 'jp-card-maestro', 'jp-card-mastercard', 'jp-card-unionpay', 'jp-card-visa', 'jp-card-visaelectron'];

            Card.prototype.defaults = {
              formatting: true,
              formSelectors: {
                numberInput: 'input[name="number"]',
                expiryInput: 'input[name="expiry"]',
                cvcInput: 'input[name="cvc"]',
                nameInput: 'input[name="name"]'
              },
              cardSelectors: {
                cardContainer: '.jp-card-container',
                card: '.jp-card',
                numberDisplay: '.jp-card-number',
                expiryDisplay: '.jp-card-expiry',
                cvcDisplay: '.jp-card-cvc',
                nameDisplay: '.jp-card-name'
              },
              messages: {
                validDate: 'valid\nthru',
                monthYear: 'month/year'
              },
              values: {
                number: '&bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull;',
                cvc: '&bull;&bull;&bull;',
                expiry: '&bull;&bull;/&bull;&bull;',
                name: 'Full Name'
              },
              classes: {
                valid: 'jp-card-valid',
                invalid: 'jp-card-invalid'
              },
              debug: false
            };

            function Card(opts) {
              this.options = extend(true, this.defaults, opts);
              if (!this.options.form) {
                console.log("Please provide a form");
                return;
              }
              this.$el = QJ(this.options.form);
              if (!this.options.container) {
                console.log("Please provide a container");
                return;
              }
              this.$container = QJ(this.options.container);
              this.render();
              this.attachHandlers();
              this.handleInitialValues();
            }

            Card.prototype.render = function() {
              var $cardContainer, baseWidth, name, obj, selector, ua, _ref, _ref1;
              QJ.append(this.$container, this.template(this.cardTemplate, extend({}, this.options.messages, this.options.values)));
              _ref = this.options.cardSelectors;
              for (name in _ref) {
                selector = _ref[name];
                this["$" + name] = QJ.find(this.$container, selector);
              }
              _ref1 = this.options.formSelectors;
              for (name in _ref1) {
                selector = _ref1[name];
                selector = this.options[name] ? this.options[name] : selector;
                obj = QJ.find(this.$el, selector);
                if (!obj.length && this.options.debug) {
                  console.error("Card can't find a " + name + " in your form.");
                }
                this["$" + name] = obj;
              }
              if (this.options.formatting) {
                Payment.formatCardNumber(this.$numberInput);
                Payment.formatCardCVC(this.$cvcInput);
                if (this.$expiryInput.length === 1) {
                  Payment.formatCardExpiry(this.$expiryInput);
                }
              }
              if (this.options.width) {
                $cardContainer = QJ(this.options.cardSelectors.cardContainer)[0];
                baseWidth = parseInt($cardContainer.clientWidth);
                $cardContainer.style.transform = "scale(" + (this.options.width / baseWidth) + ")";
              }
              if (typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0) {
                ua = navigator.userAgent.toLowerCase();
                if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {
                  QJ.addClass(this.$card, 'jp-card-safari');
                }
              }
              if (/MSIE 10\./i.test(navigator.userAgent)) {
                QJ.addClass(this.$card, 'jp-card-ie-10');
              }
              if (/rv:11.0/i.test(navigator.userAgent)) {
                return QJ.addClass(this.$card, 'jp-card-ie-11');
              }
            };

            Card.prototype.attachHandlers = function() {
              var expiryFilters;
              bindVal(this.$numberInput, this.$numberDisplay, {
                fill: false,
                filters: this.validToggler('cardNumber')
              });
              QJ.on(this.$numberInput, 'payment.cardType', this.handle('setCardType'));
              expiryFilters = [
                function(val) {
                  return val.replace(/(\s+)/g, '');
                }
              ];
              if (this.$expiryInput.length === 1) {
                expiryFilters.push(this.validToggler('cardExpiry'));
              }
              bindVal(this.$expiryInput, this.$expiryDisplay, {
                join: function(text) {
                  if (text[0].length === 2 || text[1]) {
                    return "/";
                  } else {
                    return "";
                  }
                },
                filters: expiryFilters
              });
              bindVal(this.$cvcInput, this.$cvcDisplay, {
                filters: this.validToggler('cardCVC')
              });
              QJ.on(this.$cvcInput, 'focus', this.handle('flipCard'));
              QJ.on(this.$cvcInput, 'blur', this.handle('unflipCard'));
              return bindVal(this.$nameInput, this.$nameDisplay, {
                fill: false,
                filters: this.validToggler('cardHolderName'),
                join: ' '
              });
            };

            Card.prototype.handleInitialValues = function() {
              var el, name, selector, _ref, _results;
              _ref = this.options.formSelectors;
              _results = [];
              for (name in _ref) {
                selector = _ref[name];
                el = this["$" + name];
                if (QJ.val(el)) {
                  QJ.trigger(el, 'paste');
                  _results.push(setTimeout(function() {
                    return QJ.trigger(el, 'keyup');
                  }));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            };

            Card.prototype.handle = function(fn) {
              return (function(_this) {
                return function(e) {
                  var args;
                  args = Array.prototype.slice.call(arguments);
                  args.unshift(e.target);
                  return _this.handlers[fn].apply(_this, args);
                };
              })(this);
            };

            Card.prototype.validToggler = function(validatorName) {
              var isValid;
              if (validatorName === "cardExpiry") {
                isValid = function(val) {
                  var objVal;
                  objVal = Payment.fns.cardExpiryVal(val);
                  return Payment.fns.validateCardExpiry(objVal.month, objVal.year);
                };
              } else if (validatorName === "cardCVC") {
                isValid = (function(_this) {
                  return function(val) {
                    return Payment.fns.validateCardCVC(val, _this.cardType);
                  };
                })(this);
              } else if (validatorName === "cardNumber") {
                isValid = function(val) {
                  return Payment.fns.validateCardNumber(val);
                };
              } else if (validatorName === "cardHolderName") {
                isValid = function(val) {
                  return val !== "";
                };
              }
              return (function(_this) {
                return function(val, $in, $out) {
                  var result;
                  result = isValid(val);
                  _this.toggleValidClass($in, result);
                  _this.toggleValidClass($out, result);
                  return val;
                };
              })(this);
            };

            Card.prototype.toggleValidClass = function(el, test) {
              QJ.toggleClass(el, this.options.classes.valid, test);
              return QJ.toggleClass(el, this.options.classes.invalid, !test);
            };

            Card.prototype.handlers = {
              setCardType: function($el, e) {
                var cardType;
                cardType = e.data;
                if (!QJ.hasClass(this.$card, cardType)) {
                  QJ.removeClass(this.$card, 'jp-card-unknown');
                  QJ.removeClass(this.$card, this.cardTypes.join(' '));
                  QJ.addClass(this.$card, "jp-card-" + cardType);
                  QJ.toggleClass(this.$card, 'jp-card-identified', cardType !== 'unknown');
                  return this.cardType = cardType;
                }
              },
              flipCard: function() {
                return QJ.addClass(this.$card, 'jp-card-flipped');
              },
              unflipCard: function() {
                return QJ.removeClass(this.$card, 'jp-card-flipped');
              }
            };

            bindVal = function(el, out, opts) {
              var joiner, o, outDefaults;
              if (opts == null) {
                opts = {};
              }
              opts.fill = opts.fill || false;
              opts.filters = opts.filters || [];
              if (!(opts.filters instanceof Array)) {
                opts.filters = [opts.filters];
              }
              opts.join = opts.join || "";
              if (!(typeof opts.join === "function")) {
                joiner = opts.join;
                opts.join = function() {
                  return joiner;
                };
              }
              outDefaults = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = out.length; _i < _len; _i++) {
                  o = out[_i];
                  _results.push(o.textContent);
                }
                return _results;
              })();
              QJ.on(el, 'focus', function() {
                return QJ.addClass(out, 'jp-card-focused');
              });
              QJ.on(el, 'blur', function() {
                return QJ.removeClass(el, 'jp-card-focused');
              });
              QJ.on(el, 'keyup change paste', function(e) {
                var elem, filter, i, join, outEl, outVal, val, _i, _j, _len, _len1, _ref, _results;
                val = (function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = el.length; _i < _len; _i++) {
                    elem = el[_i];
                    _results.push(QJ.val(elem));
                  }
                  return _results;
                })();
                join = opts.join(val);
                val = val.join(join);
                if (val === join) {
                  val = "";
                }
                _ref = opts.filters;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  filter = _ref[_i];
                  val = filter(val, el, out);
                }
                _results = [];
                for (i = _j = 0, _len1 = out.length; _j < _len1; i = ++_j) {
                  outEl = out[i];
                  if (opts.fill) {
                    outVal = val + outDefaults[i].substring(val.length);
                  } else {
                    outVal = val || outDefaults[i];
                  }
                  _results.push(outEl.textContent = outVal);
                }
                return _results;
              });
              return el;
            };

            return Card;

          })();

          module.exports = Card;

          global.Card = Card;

        }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
      }, {
        "../scss/card.scss": 10,
        "./payment/src/payment.coffee": 9,
        "node.extend": 1,
        "qj": 4
      }],
      8: [function(_dereq_, module, exports) {
        var $, Card,
          __slice = [].slice;

        Card = _dereq_('./card');

        $ = jQuery;

        $.card = {};

        $.card.fn = {};

        $.fn.card = function(opts) {
          return $.card.fn.construct.apply(this, opts);
        };

        $.fn.extend({
          card: function() {
            var args, option;
            option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            return this.each(function() {
              var $this, data;
              $this = $(this);
              data = $this.data('card');
              if (!data) {
                $.each(option, (function(_this) {
                  return function(key, value) {
                    if (value instanceof jQuery) {
                      return option[key] = value[0];
                    }
                  };
                })(this));
                option['form'] = this;
                $this.data('card', (data = new Card(option)));
              }
              if (typeof option === 'string') {
                return data[option].apply(data, args);
              }
            });
          }
        });

      }, {
        "./card": 7
      }],
      9: [function(_dereq_, module, exports) {
        (function(global) {
          var Payment, QJ, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, setCardType,
            __indexOf = [].indexOf || function(item) {
              for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
              }
              return -1;
            };

          QJ = _dereq_('qj');

          defaultFormat = /(\d{1,4})/g;

          cards = [{
            type: 'amex',
            pattern: /^3[47]/,
            format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
            length: [15],
            cvcLength: [3, 4],
            luhn: true
          }, {
            type: 'dankort',
            pattern: /^5019/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'dinersclub',
            pattern: /^(36|38|30[0-5])/,
            format: defaultFormat,
            length: [14],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'discover',
            pattern: /^(6011|65|64[4-9]|622)/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'jcb',
            pattern: /^35/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'laser',
            pattern: /^(6706|6771|6709)/,
            format: defaultFormat,
            length: [16, 17, 18, 19],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'maestro',
            pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
            format: defaultFormat,
            length: [12, 13, 14, 15, 16, 17, 18, 19],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'mastercard',
            pattern: /^5[1-5]/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'unionpay',
            pattern: /^62/,
            format: defaultFormat,
            length: [16, 17, 18, 19],
            cvcLength: [3],
            luhn: false
          }, {
            type: 'visaelectron',
            pattern: /^4(026|17500|405|508|844|91[37])/,
            format: defaultFormat,
            length: [16],
            cvcLength: [3],
            luhn: true
          }, {
            type: 'visa',
            pattern: /^4/,
            format: defaultFormat,
            length: [13, 14, 15, 16],
            cvcLength: [3],
            luhn: true
          }];

          cardFromNumber = function(num) {
            var card, _i, _len;
            num = (num + '').replace(/\D/g, '');
            for (_i = 0, _len = cards.length; _i < _len; _i++) {
              card = cards[_i];
              if (card.pattern.test(num)) {
                return card;
              }
            }
          };

          cardFromType = function(type) {
            var card, _i, _len;
            for (_i = 0, _len = cards.length; _i < _len; _i++) {
              card = cards[_i];
              if (card.type === type) {
                return card;
              }
            }
          };

          luhnCheck = function(num) {
            var digit, digits, odd, sum, _i, _len;
            odd = true;
            sum = 0;
            digits = (num + '').split('').reverse();
            for (_i = 0, _len = digits.length; _i < _len; _i++) {
              digit = digits[_i];
              digit = parseInt(digit, 10);
              if ((odd = !odd)) {
                digit *= 2;
              }
              if (digit > 9) {
                digit -= 9;
              }
              sum += digit;
            }
            return sum % 10 === 0;
          };

          hasTextSelected = function(target) {
            var _ref;
            if ((target.selectionStart != null) && target.selectionStart !== target.selectionEnd) {
              return true;
            }
            if ((typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? _ref.createRange : void 0 : void 0) != null) {
              if (document.selection.createRange().text) {
                return true;
              }
            }
            return false;
          };

          reFormatCardNumber = function(e) {
            return setTimeout((function(_this) {
              return function() {
                var target, value;
                target = e.target;
                value = QJ.val(target);
                value = Payment.fns.formatCardNumber(value);
                return QJ.val(target, value);
              };
            })(this));
          };

          formatCardNumber = function(e) {
            var card, digit, length, re, target, upperLength, value;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            target = e.target;
            value = QJ.val(target);
            card = cardFromNumber(value + digit);
            length = (value.replace(/\D/g, '') + digit).length;
            upperLength = 16;
            if (card) {
              upperLength = card.length[card.length.length - 1];
            }
            if (length >= upperLength) {
              return;
            }
            if ((target.selectionStart != null) && target.selectionStart !== value.length) {
              return;
            }
            if (card && card.type === 'amex') {
              re = /^(\d{4}|\d{4}\s\d{6})$/;
            } else {
              re = /(?:^|\s)(\d{4})$/;
            }
            if (re.test(value)) {
              e.preventDefault();
              return QJ.val(target, value + ' ' + digit);
            } else if (re.test(value + digit)) {
              e.preventDefault();
              return QJ.val(target, value + digit + ' ');
            }
          };

          formatBackCardNumber = function(e) {
            var target, value;
            target = e.target;
            value = QJ.val(target);
            if (e.meta) {
              return;
            }
            if (e.which !== 8) {
              return;
            }
            if ((target.selectionStart != null) && target.selectionStart !== value.length) {
              return;
            }
            if (/\d\s$/.test(value)) {
              e.preventDefault();
              return QJ.val(target, value.replace(/\d\s$/, ''));
            } else if (/\s\d?$/.test(value)) {
              e.preventDefault();
              return QJ.val(target, value.replace(/\s\d?$/, ''));
            }
          };

          formatExpiry = function(e) {
            var digit, target, val;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            target = e.target;
            val = QJ.val(target) + digit;
            if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
              e.preventDefault();
              return QJ.val(target, "0" + val + " / ");
            } else if (/^\d\d$/.test(val)) {
              e.preventDefault();
              return QJ.val(target, "" + val + " / ");
            }
          };

          formatForwardExpiry = function(e) {
            var digit, target, val;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            target = e.target;
            val = QJ.val(target);
            if (/^\d\d$/.test(val)) {
              return QJ.val(target, "" + val + " / ");
            }
          };

          formatForwardSlash = function(e) {
            var slash, target, val;
            slash = String.fromCharCode(e.which);
            if (slash !== '/') {
              return;
            }
            target = e.target;
            val = QJ.val(target);
            if (/^\d$/.test(val) && val !== '0') {
              return QJ.val(target, "0" + val + " / ");
            }
          };

          formatBackExpiry = function(e) {
            var target, value;
            if (e.metaKey) {
              return;
            }
            target = e.target;
            value = QJ.val(target);
            if (e.which !== 8) {
              return;
            }
            if ((target.selectionStart != null) && target.selectionStart !== value.length) {
              return;
            }
            if (/\d(\s|\/)+$/.test(value)) {
              e.preventDefault();
              return QJ.val(target, value.replace(/\d(\s|\/)*$/, ''));
            } else if (/\s\/\s?\d?$/.test(value)) {
              e.preventDefault();
              return QJ.val(target, value.replace(/\s\/\s?\d?$/, ''));
            }
          };

          restrictNumeric = function(e) {
            var input;
            if (e.metaKey || e.ctrlKey) {
              return true;
            }
            if (e.which === 32) {
              return e.preventDefault();
            }
            if (e.which === 0) {
              return true;
            }
            if (e.which < 33) {
              return true;
            }
            input = String.fromCharCode(e.which);
            if (!/[\d\s]/.test(input)) {
              return e.preventDefault();
            }
          };

          restrictCardNumber = function(e) {
            var card, digit, target, value;
            target = e.target;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            if (hasTextSelected(target)) {
              return;
            }
            value = (QJ.val(target) + digit).replace(/\D/g, '');
            card = cardFromNumber(value);
            if (card) {
              if (!(value.length <= card.length[card.length.length - 1])) {
                return e.preventDefault();
              }
            } else {
              if (!(value.length <= 16)) {
                return e.preventDefault();
              }
            }
          };

          restrictExpiry = function(e) {
            var digit, target, value;
            target = e.target;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            if (hasTextSelected(target)) {
              return;
            }
            value = QJ.val(target) + digit;
            value = value.replace(/\D/g, '');
            if (value.length > 6) {
              return e.preventDefault();
            }
          };

          restrictCVC = function(e) {
            var digit, target, val;
            target = e.target;
            digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
              return;
            }
            val = QJ.val(target) + digit;
            if (!(val.length <= 4)) {
              return e.preventDefault();
            }
          };

          setCardType = function(e) {
            var allTypes, card, cardType, target, val;
            target = e.target;
            val = QJ.val(target);
            cardType = Payment.fns.cardType(val) || 'unknown';
            if (!QJ.hasClass(target, cardType)) {
              allTypes = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = cards.length; _i < _len; _i++) {
                  card = cards[_i];
                  _results.push(card.type);
                }
                return _results;
              })();
              QJ.removeClass(target, 'unknown');
              QJ.removeClass(target, allTypes.join(' '));
              QJ.addClass(target, cardType);
              QJ.toggleClass(target, 'identified', cardType !== 'unknown');
              return QJ.trigger(target, 'payment.cardType', cardType);
            }
          };

          Payment = (function() {
            function Payment() {}

            Payment.fns = {
              cardExpiryVal: function(value) {
                var month, prefix, year, _ref;
                value = value.replace(/\s/g, '');
                _ref = value.split('/', 2), month = _ref[0], year = _ref[1];
                if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                  prefix = (new Date).getFullYear();
                  prefix = prefix.toString().slice(0, 2);
                  year = prefix + year;
                }
                month = parseInt(month, 10);
                year = parseInt(year, 10);
                return {
                  month: month,
                  year: year
                };
              },
              validateCardNumber: function(num) {
                var card, _ref;
                num = (num + '').replace(/\s+|-/g, '');
                if (!/^\d+$/.test(num)) {
                  return false;
                }
                card = cardFromNumber(num);
                if (!card) {
                  return false;
                }
                return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));
              },
              validateCardExpiry: function(month, year) {
                var currentTime, expiry, prefix, _ref;
                if (typeof month === 'object' && 'month' in month) {
                  _ref = month, month = _ref.month, year = _ref.year;
                }
                if (!(month && year)) {
                  return false;
                }
                month = QJ.trim(month);
                year = QJ.trim(year);
                if (!/^\d+$/.test(month)) {
                  return false;
                }
                if (!/^\d+$/.test(year)) {
                  return false;
                }
                if (!(parseInt(month, 10) <= 12)) {
                  return false;
                }
                if (year.length === 2) {
                  prefix = (new Date).getFullYear();
                  prefix = prefix.toString().slice(0, 2);
                  year = prefix + year;
                }
                expiry = new Date(year, month);
                currentTime = new Date;
                expiry.setMonth(expiry.getMonth() - 1);
                expiry.setMonth(expiry.getMonth() + 1, 1);
                return expiry > currentTime;
              },
              validateCardCVC: function(cvc, type) {
                var _ref, _ref1;
                cvc = QJ.trim(cvc);
                if (!/^\d+$/.test(cvc)) {
                  return false;
                }
                if (type && cardFromType(type)) {
                  return _ref = cvc.length, __indexOf.call((_ref1 = cardFromType(type)) != null ? _ref1.cvcLength : void 0, _ref) >= 0;
                } else {
                  return cvc.length >= 3 && cvc.length <= 4;
                }
              },
              cardType: function(num) {
                var _ref;
                if (!num) {
                  return null;
                }
                return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;
              },
              formatCardNumber: function(num) {
                var card, groups, upperLength, _ref;
                card = cardFromNumber(num);
                if (!card) {
                  return num;
                }
                upperLength = card.length[card.length.length - 1];
                num = num.replace(/\D/g, '');
                num = num.slice(0, +upperLength + 1 || 9e9);
                if (card.format.global) {
                  return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0;
                } else {
                  groups = card.format.exec(num);
                  if (groups != null) {
                    groups.shift();
                  }
                  return groups != null ? groups.join(' ') : void 0;
                }
              }
            };

            Payment.restrictNumeric = function(el) {
              return QJ.on(el, 'keypress', restrictNumeric);
            };

            Payment.cardExpiryVal = function(el) {
              return Payment.fns.cardExpiryVal(QJ.val(el));
            };

            Payment.formatCardCVC = function(el) {
              Payment.restrictNumeric(el);
              QJ.on(el, 'keypress', restrictCVC);
              return el;
            };

            Payment.formatCardExpiry = function(el) {
              Payment.restrictNumeric(el);
              QJ.on(el, 'keypress', restrictExpiry);
              QJ.on(el, 'keypress', formatExpiry);
              QJ.on(el, 'keypress', formatForwardSlash);
              QJ.on(el, 'keypress', formatForwardExpiry);
              QJ.on(el, 'keydown', formatBackExpiry);
              return el;
            };

            Payment.formatCardNumber = function(el) {
              Payment.restrictNumeric(el);
              QJ.on(el, 'keypress', restrictCardNumber);
              QJ.on(el, 'keypress', formatCardNumber);
              QJ.on(el, 'keydown', formatBackCardNumber);
              QJ.on(el, 'keyup', setCardType);
              QJ.on(el, 'paste', reFormatCardNumber);
              return el;
            };

            Payment.getCardArray = function() {
              return cards;
            };

            Payment.setCardArray = function(cardArray) {
              cards = cardArray;
              return true;
            };

            Payment.addToCardArray = function(cardObject) {
              return cards.push(cardObject);
            };

            Payment.removeFromCardArray = function(type) {
              var key, value;
              for (key in cards) {
                value = cards[key];
                if (value.type === type) {
                  cards.splice(key, 1);
                }
              }
              return true;
            };

            return Payment;

          })();

          module.exports = Payment;

          global.Payment = Payment;

        }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
      }, {
        "qj": 4
      }],
      10: [function(_dereq_, module, exports) {
        var css = ".jp-card.jp-card-safari.jp-card-identified .jp-card-front:before, .jp-card.jp-card-safari.jp-card-identified .jp-card-back:before {\n  background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), -webkit-linear-gradient(-245deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n  background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%); }\n\n.jp-card.jp-card-ie-10.jp-card-flipped, .jp-card.jp-card-ie-11.jp-card-flipped {\n  -webkit-transform: 0deg;\n  -moz-transform: 0deg;\n  -ms-transform: 0deg;\n  -o-transform: 0deg;\n  transform: 0deg; }\n  .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-front, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-front {\n    -webkit-transform: rotateY(0deg);\n    -moz-transform: rotateY(0deg);\n    -ms-transform: rotateY(0deg);\n    -o-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n  .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back {\n    -webkit-transform: rotateY(0deg);\n    -moz-transform: rotateY(0deg);\n    -ms-transform: rotateY(0deg);\n    -o-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back:after, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back:after {\n      left: 18%; }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-cvc, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-cvc {\n      -webkit-transform: rotateY(180deg);\n      -moz-transform: rotateY(180deg);\n      -ms-transform: rotateY(180deg);\n      -o-transform: rotateY(180deg);\n      transform: rotateY(180deg);\n      left: 5%; }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-shiny, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-shiny {\n      left: 84%; }\n      .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-shiny:after, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-shiny:after {\n        left: -480%;\n        -webkit-transform: rotateY(180deg);\n        -moz-transform: rotateY(180deg);\n        -ms-transform: rotateY(180deg);\n        -o-transform: rotateY(180deg);\n        transform: rotateY(180deg); }\n\n.jp-card.jp-card-ie-10.jp-card-amex .jp-card-back, .jp-card.jp-card-ie-11.jp-card-amex .jp-card-back {\n  display: none; }\n\n.jp-card-logo {\n  height: 36px;\n  width: 60px;\n  font-style: italic; }\n  .jp-card-logo, .jp-card-logo:before, .jp-card-logo:after {\n    box-sizing: border-box; }\n\n.jp-card-logo.jp-card-amex {\n  text-transform: uppercase;\n  font-size: 4px;\n  font-weight: bold;\n  color: white;\n  background-image: repeating-radial-gradient(circle at center, #FFF 1px, #999 2px);\n  background-image: repeating-radial-gradient(circle at center, #FFF 1px, #999 2px);\n  border: 1px solid #EEE; }\n  .jp-card-logo.jp-card-amex:before, .jp-card-logo.jp-card-amex:after {\n    width: 28px;\n    display: block;\n    position: absolute;\n    left: 16px; }\n  .jp-card-logo.jp-card-amex:before {\n    height: 28px;\n    content: \"american\";\n    top: 3px;\n    text-align: left;\n    padding-left: 2px;\n    padding-top: 11px;\n    background: #267AC3; }\n  .jp-card-logo.jp-card-amex:after {\n    content: \"express\";\n    bottom: 11px;\n    text-align: right;\n    padding-right: 2px; }\n\n.jp-card.jp-card-amex.jp-card-flipped {\n  -webkit-transform: none;\n  -moz-transform: none;\n  -ms-transform: none;\n  -o-transform: none;\n  transform: none; }\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front:before, .jp-card.jp-card-amex.jp-card-identified .jp-card-back:before {\n  background-color: #108168; }\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front .jp-card-logo.jp-card-amex {\n  opacity: 1; }\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front .jp-card-cvc {\n  visibility: visible; }\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front:after {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-discover {\n  background: #FF6600;\n  color: #111;\n  text-transform: uppercase;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 10px;\n  text-align: center;\n  overflow: hidden;\n  z-index: 1;\n  padding-top: 9px;\n  letter-spacing: 0.03em;\n  border: 1px solid #EEE; }\n  .jp-card-logo.jp-card-discover:before, .jp-card-logo.jp-card-discover:after {\n    content: \" \";\n    display: block;\n    position: absolute; }\n  .jp-card-logo.jp-card-discover:before {\n    background: white;\n    width: 200px;\n    height: 200px;\n    border-radius: 200px;\n    bottom: -5%;\n    right: -80%;\n    z-index: -1; }\n  .jp-card-logo.jp-card-discover:after {\n    width: 8px;\n    height: 8px;\n    border-radius: 4px;\n    top: 10px;\n    left: 27px;\n    background-color: #FFF;\n    background-image: -webkit-radial-gradient(#FFF, #FF6600);\n    background-image: radial-gradient(  #FFF, #FF6600);\n    content: \"network\";\n    font-size: 4px;\n    line-height: 24px;\n    text-indent: -7px; }\n\n.jp-card .jp-card-front .jp-card-logo.jp-card-discover {\n  right: 12%;\n  top: 18%; }\n\n.jp-card.jp-card-discover.jp-card-identified .jp-card-front:before, .jp-card.jp-card-discover.jp-card-identified .jp-card-back:before {\n  background-color: #86B8CF; }\n.jp-card.jp-card-discover.jp-card-identified .jp-card-logo.jp-card-discover {\n  opacity: 1; }\n.jp-card.jp-card-discover.jp-card-identified .jp-card-front:after {\n  -webkit-transition: 400ms;\n  -moz-transition: 400ms;\n  transition: 400ms;\n  content: \" \";\n  display: block;\n  background-color: #FF6600;\n  background-image: -webkit-linear-gradient(#FF6600, #ffa166, #FF6600);\n  background-image: linear-gradient(#FF6600, #ffa166, #FF6600);\n  height: 50px;\n  width: 50px;\n  border-radius: 25px;\n  position: absolute;\n  left: 100%;\n  top: 15%;\n  margin-left: -25px;\n  box-shadow: inset 1px 1px 3px 1px rgba(0, 0, 0, 0.5); }\n\n.jp-card-logo.jp-card-visa {\n  background: white;\n  text-transform: uppercase;\n  color: #1A1876;\n  text-align: center;\n  font-weight: bold;\n  font-size: 15px;\n  line-height: 18px; }\n  .jp-card-logo.jp-card-visa:before, .jp-card-logo.jp-card-visa:after {\n    content: \" \";\n    display: block;\n    width: 100%;\n    height: 25%; }\n  .jp-card-logo.jp-card-visa:before {\n    background: #1A1876; }\n  .jp-card-logo.jp-card-visa:after {\n    background: #E79800; }\n\n.jp-card.jp-card-visa.jp-card-identified .jp-card-front:before, .jp-card.jp-card-visa.jp-card-identified .jp-card-back:before {\n  background-color: #191278; }\n.jp-card.jp-card-visa.jp-card-identified .jp-card-logo.jp-card-visa {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-mastercard {\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  font-size: 9px;\n  line-height: 36px;\n  z-index: 1;\n  text-shadow: 1px 1px rgba(0, 0, 0, 0.6); }\n  .jp-card-logo.jp-card-mastercard:before, .jp-card-logo.jp-card-mastercard:after {\n    content: \" \";\n    display: block;\n    width: 36px;\n    top: 0;\n    position: absolute;\n    height: 36px;\n    border-radius: 18px; }\n  .jp-card-logo.jp-card-mastercard:before {\n    left: 0;\n    background: #FF0000;\n    z-index: -1; }\n  .jp-card-logo.jp-card-mastercard:after {\n    right: 0;\n    background: #FFAB00;\n    z-index: -2; }\n\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-front .jp-card-logo.jp-card-mastercard, .jp-card.jp-card-mastercard.jp-card-identified .jp-card-back .jp-card-logo.jp-card-mastercard {\n  box-shadow: none; }\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-front:before, .jp-card.jp-card-mastercard.jp-card-identified .jp-card-back:before {\n  background-color: #0061A8; }\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-logo.jp-card-mastercard {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-maestro {\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  font-size: 14px;\n  line-height: 36px;\n  z-index: 1;\n  text-shadow: 1px 1px rgba(0, 0, 0, 0.6); }\n  .jp-card-logo.jp-card-maestro:before, .jp-card-logo.jp-card-maestro:after {\n    content: \" \";\n    display: block;\n    width: 36px;\n    top: 0;\n    position: absolute;\n    height: 36px;\n    border-radius: 18px; }\n  .jp-card-logo.jp-card-maestro:before {\n    left: 0;\n    background: #0064CB;\n    z-index: -1; }\n  .jp-card-logo.jp-card-maestro:after {\n    right: 0;\n    background: #CC0000;\n    z-index: -2; }\n\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-front .jp-card-logo.jp-card-maestro, .jp-card.jp-card-maestro.jp-card-identified .jp-card-back .jp-card-logo.jp-card-maestro {\n  box-shadow: none; }\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-front:before, .jp-card.jp-card-maestro.jp-card-identified .jp-card-back:before {\n  background-color: #0B2C5F; }\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-logo.jp-card-maestro {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-dankort {\n  width: 60px;\n  height: 36px;\n  padding: 3px;\n  border-radius: 8px;\n  border: #000000 1px solid;\n  background-color: #FFFFFF; }\n  .jp-card-logo.jp-card-dankort .dk {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden; }\n    .jp-card-logo.jp-card-dankort .dk:before {\n      background-color: #ED1C24;\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      display: block;\n      border-radius: 6px; }\n    .jp-card-logo.jp-card-dankort .dk:after {\n      content: '';\n      position: absolute;\n      top: 50%;\n      margin-top: -7.7px;\n      right: 0;\n      width: 0;\n      height: 0;\n      border-style: solid;\n      border-width: 7px 7px 10px 0;\n      border-color: transparent #ED1C24 transparent transparent;\n      z-index: 1; }\n  .jp-card-logo.jp-card-dankort .d, .jp-card-logo.jp-card-dankort .k {\n    position: absolute;\n    top: 50%;\n    width: 50%;\n    display: block;\n    height: 15.4px;\n    margin-top: -7.7px;\n    background: white; }\n  .jp-card-logo.jp-card-dankort .d {\n    left: 0;\n    border-radius: 0 8px 10px 0; }\n    .jp-card-logo.jp-card-dankort .d:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      display: block;\n      background: #ED1C24;\n      border-radius: 2px 4px 6px 0px;\n      height: 5px;\n      width: 7px;\n      margin: -3px 0 0 -4px; }\n  .jp-card-logo.jp-card-dankort .k {\n    right: 0; }\n    .jp-card-logo.jp-card-dankort .k:before, .jp-card-logo.jp-card-dankort .k:after {\n      content: '';\n      position: absolute;\n      right: 50%;\n      width: 0;\n      height: 0;\n      border-style: solid;\n      margin-right: -1px; }\n    .jp-card-logo.jp-card-dankort .k:before {\n      top: 0;\n      border-width: 8px 5px 0 0;\n      border-color: #ED1C24 transparent transparent transparent; }\n    .jp-card-logo.jp-card-dankort .k:after {\n      bottom: 0;\n      border-width: 0 5px 8px 0;\n      border-color: transparent transparent #ED1C24 transparent; }\n\n.jp-card.jp-card-dankort.jp-card-identified .jp-card-front:before, .jp-card.jp-card-dankort.jp-card-identified .jp-card-back:before {\n  background-color: #0055C7; }\n.jp-card.jp-card-dankort.jp-card-identified .jp-card-logo.jp-card-dankort {\n  opacity: 1; }\n\n.jp-card-container {\n  -webkit-perspective: 1000px;\n  -moz-perspective: 1000px;\n  perspective: 1000px;\n  width: 350px;\n  max-width: 100%;\n  height: 200px;\n  margin: auto;\n  z-index: 1;\n  position: relative; }\n\n.jp-card {\n  font-family: \"Helvetica Neue\";\n  line-height: 1;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-width: 315px;\n  border-radius: 10px;\n  -webkit-transform-style: preserve-3d;\n  -moz-transform-style: preserve-3d;\n  -ms-transform-style: preserve-3d;\n  -o-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n  -webkit-transition: all 400ms linear;\n  -moz-transition: all 400ms linear;\n  transition: all 400ms linear; }\n  .jp-card > *, .jp-card > *:before, .jp-card > *:after {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    font-family: inherit; }\n  .jp-card.jp-card-flipped {\n    -webkit-transform: rotateY(180deg);\n    -moz-transform: rotateY(180deg);\n    -ms-transform: rotateY(180deg);\n    -o-transform: rotateY(180deg);\n    transform: rotateY(180deg); }\n  .jp-card .jp-card-front, .jp-card .jp-card-back {\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-transform-style: preserve-3d;\n    -moz-transform-style: preserve-3d;\n    -ms-transform-style: preserve-3d;\n    -o-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    -webkit-transition: all 400ms linear;\n    -moz-transition: all 400ms linear;\n    transition: all 400ms linear;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    border-radius: 10px;\n    background: #DDD; }\n    .jp-card .jp-card-front:before, .jp-card .jp-card-back:before {\n      content: \" \";\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      border-radius: 10px;\n      -webkit-transition: all 400ms ease;\n      -moz-transition: all 400ms ease;\n      transition: all 400ms ease; }\n    .jp-card .jp-card-front:after, .jp-card .jp-card-back:after {\n      content: \" \";\n      display: block; }\n    .jp-card .jp-card-front .jp-card-display, .jp-card .jp-card-back .jp-card-display {\n      color: white;\n      font-weight: normal;\n      opacity: 0.5;\n      -webkit-transition: opacity 400ms linear;\n      -moz-transition: opacity 400ms linear;\n      transition: opacity 400ms linear; }\n      .jp-card .jp-card-front .jp-card-display.jp-card-focused, .jp-card .jp-card-back .jp-card-display.jp-card-focused {\n        opacity: 1;\n        font-weight: 700; }\n    .jp-card .jp-card-front .jp-card-cvc, .jp-card .jp-card-back .jp-card-cvc {\n      font-family: \"Bitstream Vera Sans Mono\", Consolas, Courier, monospace;\n      font-size: 14px; }\n    .jp-card .jp-card-front .jp-card-shiny, .jp-card .jp-card-back .jp-card-shiny {\n      width: 50px;\n      height: 35px;\n      border-radius: 5px;\n      background: #CCC;\n      position: relative; }\n      .jp-card .jp-card-front .jp-card-shiny:before, .jp-card .jp-card-back .jp-card-shiny:before {\n        content: \" \";\n        display: block;\n        width: 70%;\n        height: 60%;\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n        background: #d9d9d9;\n        position: absolute;\n        top: 20%; }\n  .jp-card .jp-card-front .jp-card-logo {\n    position: absolute;\n    opacity: 0;\n    right: 5%;\n    top: 8%;\n    -webkit-transition: 400ms;\n    -moz-transition: 400ms;\n    transition: 400ms; }\n  .jp-card .jp-card-front .jp-card-lower {\n    width: 80%;\n    position: absolute;\n    left: 10%;\n    bottom: 30px; }\n    @media only screen and (max-width: 480px) {\n      .jp-card .jp-card-front .jp-card-lower {\n        width: 90%;\n        left: 5%; } }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-cvc {\n      visibility: hidden;\n      float: right;\n      position: relative;\n      bottom: 5px; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-number {\n      font-family: \"Bitstream Vera Sans Mono\", Consolas, Courier, monospace;\n      font-size: 24px;\n      clear: both;\n      margin-bottom: 30px; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-expiry {\n      font-family: \"Bitstream Vera Sans Mono\", Consolas, Courier, monospace;\n      letter-spacing: 0em;\n      position: relative;\n      float: right;\n      width: 25%; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:before, .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:after {\n        font-family: \"Helvetica Neue\";\n        font-weight: bold;\n        font-size: 7px;\n        white-space: pre;\n        display: block;\n        opacity: 0.5; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:before {\n        content: attr(data-before);\n        margin-bottom: 2px;\n        font-size: 7px;\n        text-transform: uppercase; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:after {\n        position: absolute;\n        content: attr(data-after);\n        text-align: right;\n        right: 100%;\n        margin-right: 5px;\n        margin-top: 2px;\n        bottom: 0; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-name {\n      text-transform: uppercase;\n      font-family: \"Bitstream Vera Sans Mono\", Consolas, Courier, monospace;\n      font-size: 20px;\n      max-height: 45px;\n      position: absolute;\n      bottom: 0;\n      width: 190px;\n      display: -webkit-box;\n      -webkit-line-clamp: 2;\n      -webkit-box-orient: horizontal;\n      overflow: hidden;\n      text-overflow: ellipsis; }\n  .jp-card .jp-card-back {\n    -webkit-transform: rotateY(180deg);\n    -moz-transform: rotateY(180deg);\n    -ms-transform: rotateY(180deg);\n    -o-transform: rotateY(180deg);\n    transform: rotateY(180deg); }\n    .jp-card .jp-card-back .jp-card-bar {\n      background-color: #444;\n      background-image: -webkit-linear-gradient(#444, #333);\n      background-image: linear-gradient(#444, #333);\n      width: 100%;\n      height: 20%;\n      position: absolute;\n      top: 10%; }\n    .jp-card .jp-card-back:after {\n      content: \" \";\n      display: block;\n      background-color: #FFF;\n      background-image: -webkit-linear-gradient(#FFF, #FFF);\n      background-image: linear-gradient(#FFF, #FFF);\n      width: 80%;\n      height: 16%;\n      position: absolute;\n      top: 40%;\n      left: 2%; }\n    .jp-card .jp-card-back .jp-card-cvc {\n      position: absolute;\n      top: 40%;\n      left: 85%;\n      -webkit-transition-delay: 600ms;\n      -moz-transition-delay: 600ms;\n      transition-delay: 600ms; }\n    .jp-card .jp-card-back .jp-card-shiny {\n      position: absolute;\n      top: 66%;\n      left: 2%; }\n      .jp-card .jp-card-back .jp-card-shiny:after {\n        content: \"This card has been issued by Jesse Pollak and is licensed for anyone to use anywhere for free.\\AIt comes with no warranty.\\A For support issues, please visit: github.com/jessepollak/card.\";\n        position: absolute;\n        left: 120%;\n        top: 5%;\n        color: white;\n        font-size: 7px;\n        width: 230px;\n        opacity: 0.5; }\n  .jp-card.jp-card-identified {\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3); }\n    .jp-card.jp-card-identified .jp-card-front, .jp-card.jp-card-identified .jp-card-back {\n      background-color: #000;\n      background-color: rgba(0, 0, 0, 0.5); }\n      .jp-card.jp-card-identified .jp-card-front:before, .jp-card.jp-card-identified .jp-card-back:before {\n        -webkit-transition: all 400ms ease;\n        -moz-transition: all 400ms ease;\n        transition: all 400ms ease;\n        background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 70% 70%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 90% 20%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 15% 80%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), -webkit-linear-gradient(-245deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n        background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 70% 70%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 90% 20%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-radial-gradient(circle at 15% 80%, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n        opacity: 1; }\n      .jp-card.jp-card-identified .jp-card-front .jp-card-logo, .jp-card.jp-card-identified .jp-card-back .jp-card-logo {\n        box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3); }\n    .jp-card.jp-card-identified.no-radial-gradient .jp-card-front:before, .jp-card.jp-card-identified.no-radial-gradient .jp-card-back:before {\n      background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), -webkit-linear-gradient(-245deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n      background-image: repeating-linear-gradient(45deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(135deg, rgba(255, 255, 255, 0.05) 1px, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.03) 4px), repeating-linear-gradient(90deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), repeating-linear-gradient(210deg, rgba(255, 255, 255, 0) 1px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.04) 3px, rgba(255, 255, 255, 0.05) 4px), linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%); }\n";
        (_dereq_('sassify'))(css);
        module.exports = css;
      }, {
        "sassify": 5
      }]
    }, {}, [8])
    (8)
});

// This is the only other script tag that needs to be included on the page.
new Card({
  form: document.querySelector('form'),
  container: '.card-wrapper'
});

//$('#cc-number').validateCreditCard(function(result) {
//   $('#cc-type').html( (result.card_type == null ? '' : '( '+result.card_type.name+' )') );

//});
var mPoint = 768;
var actionView = true;
var MinFundAmount = 100;

$(function () {
    $.ajaxSetup({
        error: function (jqXHR, textStatus, errorThrown) {
            if (jqXHR.status === 401) {
                location.reload(true);
            } else {
                $('.modal').modal('hide');
                $('#modal-catch-errors .errorWrap').removeClass('.d-none');
                if (textStatus) {
                    $('#modal-catch-errors .errorText').text(textStatus + ' ( ' + jqXHR.status + ' )');
                } else if (errorThrown) {
                    $('#modal-catch-errors .errorText').text(errorThrown + ' ( ' + jqXHR.status + ' )');
                } else {
                    $('#modal-catch-errors .errorWrap').addClass('.d-none');
                }
                $('#modal-catch-errors').modal('show');
            }
        }
    });


    $(".dropdown-toggle").dropdown();
    $('[data-toggle="tooltip"]').tooltip();

    //Admin Menu
    $(".open-trigger").click(function (e) {


        e.preventDefault();
        if ($(window).width() > 1024) {
            $(".page .sidebar").toggleClass("nav-shrinked");
        } else {
            $(".page .sidebar").toggleClass("nav-opened");
        }
    });

    $(window).resize(function (e) {
        $(".page .sidebar")
            .removeClass("nav-opened")
            .removeClass("nav-shrinked");
    });

    $('.main .auth').on('click', '.toggle_pwd_field', function (e) {
        var x = $(this).siblings('.home_pwd_in_box');
        if (x.attr("type") === "password") {
            x.attr("type", "text");

        } else {
            x.attr("type", "password");
        }
        $(this).find('.icon').toggleClass('d-none');
    });


    //Landing Form
    setFormPosition();
    setBgPosition();
    $(window).resize(function (e) {
        setFormPosition(); setBgPosition();
    })

    $(window).scroll(function (e) {
        if ($(window).width() > mPoint && $(".home .info .how-info").length > 0) {
            var howTop = $(".home .info .how-info").offset().top - 800;
            var scrollTop = $(window).scrollTop();
            if (scrollTop > howTop) {
                $(".home .auth").css({
                    top: (140 + howTop),
                    position: "absolute"
                });
            }
            else {
                $(".home .auth").css({
                    top: 140,
                    position: "fixed"
                });
            }
        }
    })

    //Landing Scroll Btn
    $(".home .intro .btn-round").click(function (e) {
        e.preventDefault();

        var _top = $(".home .info").offset().top + 100;

        $("html,body").animate({
            scrollTop: _top
        })
    })

    //Input Index Adjust
    $(".input.password-check input").focus(function () {
        $(".input").removeClass("elevate");
        $(this).parent().addClass("elevate");
    })

    $(".form-card .page-reload").click(function (e) {
        e.preventDefault();
        e.stopPropagation();
        location.reload(true);
    })
    //Home Form Movement

    //$(".form-card .form-link").click(function (e) {
    $('.m-content-wrap').on('click', '.form-card .form-link', function (e) {
        e.preventDefault();
        e.stopPropagation();
        //debugger
        var idLink = $(this).data("link");
        var option = $(this).data("option");
        $(this).parents(".m-content-wrap").find(".form-card .form-section").removeClass("active");
        if (idLink === "alert") {
            $(this).parents(".m-content-wrap").find(".form-card .form-section." + idLink).removeClass("success");
            $(this).parents(".m-content-wrap").find(".form-card .form-section." + idLink).removeClass("error");
            $(this).parents(".m-content-wrap").find(".form-card .form-section." + idLink).addClass("active " + option);
        }
        else if (option === "load") {
            $(this).parents(".m-content-wrap").find(".form-card .form-section.loading").addClass("active");
            setTimeout(function (e) {
                $(this).parents(".m-content-wrap").find(".form-card .form-section").removeClass("active");
                $(this).parents(".m-content-wrap").find(".form-card .form-section." + idLink).addClass("active");
            }, 3000);
        }
        else {
            $(this).parents(".m-content-wrap").find(".form-card .form-section." + idLink).addClass("active");
        }
    })


    //Overview Promotion Slide
    if ($(".promo-slide").length > 0) {
        $(".promo-slide").slick({
            dots: false,
            infinite: false,
            fade: true,
            slidesToShow: 1,
            prevArrow: '<a class="arrow-prev"><i class="icon auto"><svg width="10" height="14" viewBox="0 0 10 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.99805 1.63895L4.431 6.95456L9.99805 12.2701L8.28157 13.9091L0.998047 6.95456L8.28157 0L9.99805 1.63895Z" fill="#5D2684"/></svg></i></a>',
            nextArrow: '<a class="arrow-next"><i class="icon auto"><svg width="9" height="14" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 12.361L5.56705 7.04544L0 1.72986L1.71647 0.09091L9 7.04544L1.71647 14L0 12.361Z" fill="#5D2684" /></svg></i></a>',
        })
    }

    //Overview Action Toggle
    $(".admin .overview .action-trigger").click(function (e) {
        e.preventDefault();
        if (!actionView) {
            $(this).addClass("hide");
            $(".admin .overview .content-action").removeClass("hide");
        }
        actionView = true;
    })
    $(".admin .overview .content-action .action-close").click(function (e) {
        e.preventDefault();
        if (actionView) {
            $(".admin .overview .content-action").addClass("hide");
            $(".admin .overview .action-trigger").removeClass("hide");
        }
        actionView = false;
    })

    if ($(window).width() <= mPoint) {
        actionView = false;
        $(".admin .overview .action-trigger").removeClass("hide");
        $(".admin .overview .content-action").addClass("hide");
    }

    //Load Overview Charts
    loadCharts();

    /*if ($('#Pin').val() !== "") {
    
        var p = $('#Pin').val();
        $('#UsersNewPin').html(p);
        $('#modal-auth-generate').modal('toggle');
    }*/


    //Overview Fund File Upload
    if ($("#modal-fund-trn-multiple").get(0) != null) {

        //$(".fund-trn-file-template .select-list .upload-btn").click(function (e) {
        //    debugger
        $("#modal-fund-trn-multiple").on("click", ".fund-trn-file-template .select-list .upload-btn", function (e) {
            e.preventDefault();
            $(".fund-trn-file-template .file-input").trigger("click");
        })

        //$(".fund-trn-file-template .file-input").change(function (e) {
        $("#modal-fund-trn-multiple").on("change", ".fund-trn-file-template .file-input", function (e) {
            var fInputEle = $('this');
            fInputEle.parents('.form-section.fund-trn-file-template').find('.error_message').text("");
            //var file = e.target.files[0];
            var file = this.files[0];
            if (file !== null) {
                //debugger
                console.log(file.type);
                filename = file.name;
                var ext = filename.split('.').pop().toLowerCase();
                if (file.type.match("application.*") || file.type.match("text/csv") || ext == "csv" || ext == "xlsx" || ext == "xls") {

                    var formData = new FormData();
                    formData.append('file', file);
                    //debugger
                    $("#modal-fund-trn-multiple .form-card .form-section").removeClass("active");
                    $("#modal-fund-trn-multiple .form-card .form-section.loading").addClass("active");

                    $.ajax({
                        url: '/Transaction/UploadCSV',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            $("#modal-fund-trn-multiple .modal-content").html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            if (jqXHR.status === 401) {
                                location.reload(true);
                            }
                            $("#modal-fund-trn-multiple .form-card .form-section.loading").removeClass("active");
                            $("#modal-fund-trn-multiple .form-card .form-section .fund-trn-file-template").addClass("active");
                            fInputEle.parents('.form-section.fund-trn-file-template').find('.error_message').html("Upload failed, kindly re-upload file.<br/>Reason:" + errorThrown);
                        }
                    });



                    var _next = $(".fund-trn-file-template .select-list .upload-btn").data("link");

                    //setTimeout(function () {
                    //    $('#modal-fund-trn-multiple .form-card .form-section').removeClass("active");
                    //    $('#modal-fund-trn-multiple .form-card .form-section.' + _next).addClass("active");
                    //}, 2500);
                }
            } else {
                fInputEle.parents('.form-section.fund-trn-file-template').find('.error_message').text("Uploaded file is invalid, kindly upload a valid file");
            }

        })
    }


    if ($("#hasresetpin").text() == "0") {
        $('#modal-auth-generate').modal('toggle');
        setTimeout(function () {
            $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
            $('#modal-auth-generate .form-card .form-section.auth-pin').addClass("active");
        }, 800);
    }

    $("#cont .form-link-pin").click(function (e) {
        // debugger
        e.preventDefault();
        e.stopPropagation();
        $('#modal-auth-generate .form-card .form-section.auth-pin').removeClass("active");
        $('#modal-auth-generate .form-card .form-section.loading').addClass("active");
        $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html("");
        var p1 = $("#p1").val();
        var p2 = $("#p2").val();
        var p3 = $("#p3").val();
        var p4 = $("#p4").val();
        var p5 = $("#p5").val();
        var p6 = $("#p6").val();
        var p7 = $("#p7").val();
        var p8 = $("#p8").val();
        if (p1 === p5 && p2 === p6 && p3 === p7 && p4 === p8) {
            $("#modal-auth-generate .form-card .form-section.alert.sub .errorchange").addClass("d-none");
            $("#modal-auth-generate .form-card .form-section.alert.sub .successchange").addClass("d-none");
            $("#modal-auth-generate .form-card .form-section.alert.sub .networkchange").addClass("d-none");

            $.ajax({

                url: "/Wallet/CreateAuthPin",
                type: "POST",

                data: {
                    pin: p1 + p2 + p3 + p4,
                },

                success: function (data) {
                    if (data.result == "success") {
                        $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
                        //$(".form-section.alert.sub.message").removeClass("success");
                        $("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("error");
                        $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.successchange").removeClass("d-none");
                        $('#modal-auth-generate .form-card .form-section.alert').addClass("active success");
                    } else if (data.result == "failed") {
                        $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
                        $("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("success");
                        //$(".form-section.alert.sub.message").removeClass("error");
                        $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html(data.message);
                        $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.errorchange").removeClass("d-none");
                        $('#modal-auth-generate .form-card .form-section.alert').addClass("active error");
                    } else if (data.result == "network") {
                        $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
                        $("#modal-auth-generate .form-card .form-section.alert.sub.success.message").removeClass("success");
                        //$(".form-section.alert.sub.success.message").removeClass("error");
                        $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.networkchange").removeClass("d-none");
                        $('#modal-auth-generate .form-card .form-section.alert').addClass("active error");
                    }

                },
                error: function (xhr, textStatus, error) {
                    if (xhr.status === 401) {
                        location.reload(true);
                    }
                    $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
                    $("#modal-auth-generate .form-card .form-section.alert.sub.success.message").removeClass("success");
                    //$(".form-section.alert.sub.success.message").removeClass("error");
                    $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.networkchange").removeClass("d-none");
                    $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html("Error occured while processing your request,kindly try again.<br/>Reason: " + error);
                    $('#modal-auth-generate .form-card .form-section.alert').addClass("active error");
                }
            });
        } else if (p1 == "" || p2 == "" || p3 == "" || p4 == "" || p5 == "" || p6 == "" || p7 == "" || p8 == "") {
            $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
            $("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("success");
            //$("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("error");
            $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.errorchange").removeClass("d-none");
            $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html("Please fill in all the boxes to complete the required 4 numbers ");
            $('#modal-auth-generate .form-card .form-section.alert').addClass("active error");
            $('#modal-auth-generate .form-card .form-section.alert.sub .continue-alert-btn').addClass("d-none");
            $('#modal-auth-generate .form-card .form-section.alert.sub .try-pin-again').removeClass("d-none");
        }
        else {
            $('#modal-auth-generate .form-card .form-section.loading').removeClass("active");
            $("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("success");
            //$("#modal-auth-generate .form-card .form-section.alert.sub.message").removeClass("error");
            $("#modal-auth-generate .form-card .form-section.alert.sub .d-none.errorchange").removeClass("d-none");
            $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html("Your new pin and confirmation pin doesn't match,kindly check and try again ");
            $('#modal-auth-generate .form-card .form-section.alert').addClass("active error");
            $('#modal-auth-generate .form-card .form-section.alert.sub .continue-alert-btn').addClass("d-none");
            $('#modal-auth-generate .form-card .form-section.alert.sub .try-pin-again').removeClass("d-none");
        }
    })

    $(".modals").on("click", "#modal-auth-generate .form-card .form-section.alert.sub .try-pin-again", function (e) {

        $(this).addClass("d-none");
        $('#modal-auth-generate .form-card .form-section.alert.sub .continue-alert-btn').removeClass("d-none");
        $("#modal-auth-generate .form-card .form-section.alert.sub .respmessage").html("");
        $('#modal-auth-generate .form-card .form-section.alert').removeClass("active");
        $('#modal-auth-generate .form-card .form-section.auth-pin').addClass("active");
        $("#modal-auth-generate .form-card .form-section.alert.sub .errorchange").addClass("d-none");
    });


    //Setting Load
   // setSettingActive();

    //Setting Trans PIN Modal
    $(".settings .empty-info .btn").click(function (e) {
        debugger
        setTimeout(function (e) {
            $('#modal-setup-transpin .form-card .form-section').removeClass("active");
            $('#modal-setup-transpin .form-card .form-section.setting-transpin-setup').addClass("active");
        }, 2500);
    })





    //Setting KYC Upload
    $(".settings .docs .upload-btn").click(function (e) {
        e.preventDefault();
        var _parent = $(this).parent();
        var _file = _parent.find("input[type=file]");

        $(_file).trigger("click");
    })
    $(".settings .docs .remove-btn").click(function (e) {
        e.preventDefault();
        var _parent = $(this).parent();
        _parent.find("input[type=file]").val("");
        _parent.removeClass("attached");
    })

    $(".settings .docs .image .icon, .settings .avater .image .icon").click(function (e) {
        var _parent = $(this).parent().parent();
        var _file = _parent.find("input[type=file]");

        $(_file).trigger("click");
    })

    $(".settings .docs .item.profile-pic input, .settings .avater input").change(function (e) {
        var file = e.target.files[0];
        if (file.type.match("image.*")) {
            var _parent = $(this).parent().parent();

            var reader = new FileReader();
            reader.onload = function (_file) {
                var dataUrl = _file.target.result;

                _parent.find(".image").attr("style", "background-image: url('" + dataUrl + "')");
            }

            reader.readAsDataURL(file);
        }
    })

    $(".settings .docs .item:not(.profile-pic) input").change(function (e) {
        var file = e.target.files[0];
        if (file.type.match("application.*")) {
            var _parent = $(this).parent().parent();
            var _text = $(this).parent().find(".file");
            _text.html(file.name + " | <em>" + formatSize(file.size) + "</em>");
            _parent.addClass("attached");

        }
    });


    //General PIN Input Movement
    $('section div.form-card, .modal .modal-content, .setting-content').on('input', '.input-pin input', function (e) {
        $(this).attr("maxlength", "1");
        var _parent = $(this).parent();
        var _index = $(this).index() + 1;
        var _num = 4;
        if (_parent.hasClass("x6")) {
            _num = 6;
        }

        if ($(this).val().length === 1) {
            $(this).blur();

            if (_index < _num) {
                _parent.find("input:nth-child(" + (_index + 1) + ")").focus();
            }
        }
    });

    $('section div.form-card, .modal .modal-content .setting-content').on('keyup', '.input-pin input', function (e) {
        if (e.key.toLowerCase() === "backspace") {
            var _parent = $(this).parent();
            var _index = $(this).index() + 1;

            if ($(this).val().length === 0) {
                $(this).blur();

                if (_index > 1) {
                    _parent.find("input:nth-child(" + (_index - 1) + ")").focus();
                }
            }

        }
    });

    //Password Input Event
    $('section div.form-card, .modal .modal-content').on('input', 'form .input.password-check input[type=password]', function (e) {
        checkPasswordPolicy($(this).val(), $(this));
    });

    formatInput();



    //$(document).on('show.bs.modal', '#modal-fund-trn-single', function (e) {
    //    debugger
    //    $("#modal-fund-trn-single .modal-content .form-card .form-section").removeClass('active');
    //    //$("#modal-fund-trn-single .modal-content .form-card .form-section.fund-trn-phone").addClass('active');
    //    if ($("#modal-fund-trn-single .modal-content .form-card .form-section.fund-trn-phone").get(0) != null) {
    //        $("#modal-fund-trn-single .modal-content .form-card .form-section.fund-trn-phone").addClass('active');
    //    } else {
    //        $("#modal-fund-trn-single .modal-content .form-card .form-section.fund-trn-transpin").addClass('active');
    //    }

    //});


    $('#modal-fund-trn-single').on('click', '#ContinueTrans', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('.fund-trn-phone form .multiple_trn_error').remove();
        var detailInvalid = false;
        var Amount = $('.fund-trn-phone .amtfield').val().replace(",", "");
        var DestinationPhone = $('#TransactionModel_DestinationPhone').val();
        if (!DestinationPhone || !Amount || DestinationPhone.length < 10 || Amount.length < 1) {
            detailInvalid = true;
        }
        if (parseFloat(Amount) < 100) {
            $('.fund-trn-phone form p').after('<div class="multiple_trn_error"><span style="color: #ff7070; font-weight: bold;">Amount must be at least N100</span></div>');
            //$("#modal-fund-trn-single .form-section").toggleClass('active');
            return false;
        }
        if (detailInvalid) {
            $('.fund-trn-phone form p').after('<div class="multiple_trn_error"><span style="color: #ff7070; font-weight: bold;">Phone Number / Amount is Invalid</span></div>');
            //$("#modal-fund-trn-single .form-section").toggleClass('active');
            return false;
        }
        $("#modal-fund-trn-single .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            var ss = $("#modal-fund-trn-single .modal-content");
            $("#modal-fund-trn-single .modal-content").html(data);
        });
    });


    $('#modal-fund-trn-single').on('click', '#CompleteTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();
        var valid = true;
        $("#modal-fund-trn-single .form-section p.auth_pin_text").removeClass("errorColor");
        $("#modal-fund-trn-single .form-section .input-pin input[type='text']").each(function (e) {
            if (!$(this).val()) {
                $("#modal-fund-trn-single .form-section p.auth_pin_text").addClass("errorColor");
                valid = false;
                return false;
            }
        });
        if (valid) {
            $("#modal-fund-trn-single .form-section").toggleClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            $.post(nform.attr("action"), nform.serialize(), function (data) {

                var ss = $("#modal-fund-trn-single .modal-content");
                $("#modal-fund-trn-single .modal-content").html(data);

            });
        }
    });



    $('#modal-fund-trn-single').on('click', '#fund-trn-otptoken', function (e) {

        e.preventDefault();
        e.stopPropagation();
        var valid = true;
        $("#modal-fund-trn-single .form-section label.auth_pin_text").removeClass("errorColor");
        $("#modal-fund-trn-single .form-section .input-pin input[type='text']").each(function (e) {
            if (!$(this).val()) {
                $("#modal-fund-trn-single .form-section label.auth_pin_text").addClass("errorColor");
                valid = false;
                return false;
            }
        });
        if (valid) {
            $("#modal-fund-trn-single .form-section").toggleClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            $.post("Transaction/TransferOTPAuth", nform.serialize(), function (data) {

                $("#modal-fund-trn-single .modal-content").html(data);

            });

        }
    });


    $('#modal-fund-trn-single').on('click', '#fund-trn-transpin', function (e) {

        e.preventDefault();
        e.stopPropagation();
        var valid = true;
        $("#modal-fund-trn-single .form-section label.auth_pin_text").removeClass("errorColor");
        $("#modal-fund-trn-single .form-section .input-pin input[type='text']").each(function (e) {
            if (!$(this).val()) {
                $("#modal-fund-trn-single .form-section label.auth_pin_text").addClass("errorColor");
                valid = false;
                return false;
            }
        });
        if (valid) {
            $("#modal-fund-trn-single .form-section").toggleClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            $.post("Transaction/TransferTAPAuth", nform.serialize(), function (data) {

                $("#modal-fund-trn-single .modal-content").html(data);

            });
        }
    });


    $('#modal-fund-trn-single').on('click', '#CompleteTAPTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-single .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            var ss = $("#modal-fund-trn-single .modal-content");
            $("#modal-fund-trn-single .modal-content").html(data);

        });
    });


    $('#modal-fund-trn-single').on('click', '#CompleteOTPTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-single .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            var ss = $("#modal-fund-trn-single .modal-content");
            $("#modal-fund-trn-single .modal-content").html(data);

        });
    });


    $('#modal-fund-wallet').on('click', '#FundButton', function (e) {
        $('#modal-fund-wallet .form-card .form-section.loading').addClass("active");
        $.ajax({
            type: "GET",
            url: "/Wallet/QueryCards",
            async: false,
            success: function (response) {
                $("#modal-fund-wallet .modal-content").html(response);
                $(".form-section.wallet-amount .fund_amount.currency").each(function (index) {
                    $(this).attr("id", "cleave-wallet-amount-" + index);
                    var cleave = new Cleave("#cleave-wallet-amount-" + index, {
                        numeral: true,
                        numeralThousandsGroupStyle: "thousand",
                        numeralPositiveOnly: true
                    });
                });
                $(".form-section.card-info input.credit-card").each(function (index) {
                    $(this).attr("id", "cleave-card-info-card-" + index);
                    var cleave = new Cleave("#cleave-card-info-card-" + index, {
                        blocks: [4, 4, 4, 4, 3],
                        numericOnly: true,
                    });
                });
                //Expiration
                $(".form-section.card-info input.expire").each(function (index) {
                    $(this).attr("id", "cleave-card-info-expire-" + index);
                    var cleave = new Cleave("#cleave-card-info-expire-" + index, {
                        date: true,
                        datePattern: ["m", "Y"]
                    });
                });
                //CVV 
                $(".form-section.card-info  input.cvv").each(function (index) {
                    $(this).attr("id", "cleave-card-info-cvv-" + index);
                    var cleave = new Cleave("#cleave-card-info-cvv-" + index, {
                        numeral: true,
                        numeralThousandsGroupStyle: "none",
                        numeralPositiveOnly: true,
                        numeralDecimalScale: 0
                    });
                });
            }
        });

    });

    $('#modal-fund-wallet').on('click', '#AddCardInline', function (e) {
        e.preventDefault();
        e.stopPropagation();
        var clickedEle = $(this);
        $(this).removeClass('active');
        var nform = clickedEle.closest('form');
        $('#modal-fund-wallet .error_message').text("");
        var amount_string = nform.find('.fund_amount').val();
        amount_string = amount_string.replace(/[^\d\.\-]/g, "");
        //debugger
        var nAmount = parseFloat(amount_string);
        if (!isNaN(nAmount) && nAmount >= MinFundAmount) {
            $('#modal-fund-wallet .form-card .form-section').removeClass("active");
            $('#modal-fund-wallet .form-card .form-section.card-info').addClass("active");
        } else {
            // debugger
            nform.find('.error_message').text("Enter a valid amount, amount must be N100 or more.");
            //$("#modal-fund-wallet .form-section").toggleClass('active');
        }

    });


    $('#modal-fund-wallet .modal-content').on('click', '.select-list .item', function (e) {


        //localStorage.removeItem('Card');
        $('.modals .modal-dialog .form-card .select-list .item').removeClass('active');
        $(this).addClass('active');
        //var CardId = $(this).find('.Id').val();

        //localStorage.setItem('Card', CardId);


    });


    $('#modal-fund-wallet').on('click', '#GoToPinButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-wallet .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-fund-wallet .modal-content").html(data);

        });
    });


    $('#modal-fund-wallet').on('click', '#FundWalletButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        if ($('.modals .modal-dialog .form-card .select-list .item').hasClass('active')) {
            //var id = localStorage.getItem('Card');
            var id = $('.modals .modal-dialog .form-card .select-list .item.active').find('.Id').val();

            $("#modal-fund-wallet .form-section").removeClass('active');
            $("#modal-fund-wallet .form-section.loading").addClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            nform.find('.error_message').text("");
            var amount_string = nform.find('.fund_amount').val();
            amount_string = amount_string.replace(/[^\d\.\-]/g, "");
            debugger
            var nAmount = parseFloat(amount_string);
            if (!isNaN(nAmount) && nAmount >= MinFundAmount) {
                $.post(nform.attr("action") + "/" + id, nform.serialize(), function (data) {
                    debugger
                    $("#modal-fund-wallet .modal-content").html(data);

                }).fail(function () {
                    debugger
                    $("#modal-fund-wallet .form-section").removeClass('active');
                    $("#modal-fund-wallet .form-section.wallet-amount").addClass('active');
                });
            } else {
                debugger
                nform.find('.error_message').text("Enter a valid amount, amount must be N100 or more.");
                $("#modal-fund-wallet .form-section").removeClass('active');
                $("#modal-fund-wallet .form-section.wallet-amount").addClass('active');
            }
        } else {
            $('#modal-fund-wallet .form-card .form-section .error_message').text("You must select a card");
        }
    });


    $("#modal-fund-wallet").on('keyup', '.form-section.wallet-amount .fund_amount', function (e) {
        var charge_string = $('.form-section.wallet-amount .cc_charge').html();
        charge_string = charge_string.replace(/[^\d\.\-]/g, "");
        var charge = parseFloat(charge_string);
        var amount_string = $(this).val();
        amount_string = amount_string.replace(/[^\d\.\-]/g, "");
        var amount = parseFloat(amount_string);
        if (!isNaN(charge) && !isNaN(amount)) {
            var total = amount + charge;
            $('.total_amount .total_charge').html(total.toString().replace(/,/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ","));
        }
    });

    $('#modal-add-card').on('click', '#AddCardButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-add-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-add-card .modal-content").html(data);

        });
    });


    $('#modal-add-card').on('click', '#CardPinButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-add-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-add-card .modal-content").html(data);

        });
    });


    $('#modal-setup-transpin').on('click', '#2FAButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-setup-transpin .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-setup-transpin .modal-content").html(data);

        });
    });

    //Registration

   
    $('#Reg-form-card').on('click', '#ValidatePhoneButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);
            formatInput();

        });
    });


    $('#Reg-form-card').on('click', '#ResendCodeButton', function (e) {
        //  debugger
        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');

        $.post("/Auth/ResendCode", nform.serialize(), function (data) {
            //  debugger
            $("#Reg-form-card").html(data);

            $("#otp1 input[type='text']").val('');
            //$("#otp2").val("") ;
            //$("#otp3").val("") ;
            //$("#otp4").val("") ;
            //$("#otp5").val("") ;
            //$("#otp6").val("");
        });
    });


    $('#Reg-form-card').on('click', '#VerifyPinButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });


    $('#Reg-form-card').on('click', '#SignUpButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });

    $('#Reg-form-card').on('click', '#EXSignUpButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });




    //Password Reset
    $('#Reg-form-card').on('click', '#ResetPassButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-two").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });

    $('#Reg-form-card').on('click', '#ValidateRCodeButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });


    $('#Reg-form-card').on('click', '#ResetButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);

        });
    });

    $('#Reg-form-card').on('click', '#ResendRCodeButton', function (e) {
        //debugger
        e.preventDefault();
        e.stopPropagation();

        $("#Reg-form-card .form-section").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        var i = nform.serialize();
        $.post("/Auth/ResendResetCode", nform.serialize(), function (data) {

            $("#Reg-form-card").html(data);
            $(".otpass input[type='text']").val('');



        });
    });


    //Multiple Recipient
    $('#modal-fund-trn-multiple').on('click', '#fund-trn-add-recipient', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-multiple  .f-two").toggleClass('active');
        $("#modal-fund-trn-multiple  .f-three").toggleClass('active');
    });


    $('#modal-fund-trn-multiple').on('click', '#fund-trn-file-upload', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-multiple  .f-two").toggleClass('active');
        $("#modal-fund-trn-multiple  .f-five").toggleClass('active');
    });


    //$('#recipient-list-id').on('click', '.delete-beneficiary', function (e) {
    //    $(this).parents('.item').remove();

    //    return false;
    //});

    //$('#recipient-list-id').on('click', '.delete-beneficiary', function (e) {
    //    debugger
    //    let Phone = $('#PhoneField').val();
    //    let DestinationPhone = $(this).parents('.item').find('.phone_number_tfr').text();
    //    let itemsArray = localStorage.getItem(Phone) ? JSON.parse(localStorage.getItem(Phone)) : [];
    //    debugger
    //    for (let i = itemsArray.length - 1; i >= 0; i--) {
    //        if (itemsArray[i].DestinationPhone == DestinationPhone) {
    //            itemsArray.splice(i, 1);
    //        }
    //    }

    //    localStorage.setItem(Phone, JSON.stringify(itemsArray));
    //    $(this).parents('.item').remove();
    //    return false;
    //});
    $('#recipient-list-id').on('click', '.delete-beneficiary', function (e) {
        let Phone = $('#PhoneField').val();
        let total = 0;
        let DestinationPhone = $(this).parents('.item').find('.phone_number_tfr').text();
        let itemsArray = localStorage.getItem(Phone) ? JSON.parse(localStorage.getItem(Phone)) : [];

        for (let i = itemsArray.length - 1; i >= 0; i--) {
            if (itemsArray[i].DestinationPhone == DestinationPhone) {
                itemsArray.splice(i, 1);
            } else {
                total += parseFloat(itemsArray[i].Amount);
            }
        }
        $('#recipient-list-id div.bottom .sum').html("Total: <strong>&#8358;" + total + "</strong>");
        $('#recipient-list-id .count').html(itemsArray.length);
        localStorage.setItem(Phone, JSON.stringify(itemsArray));
        $(this).parents('.item').remove();
        return false;
    });

    $('#recipient-list-id').on('click', '.add-another', function (e) {
        $("#modal-fund-trn-multiple .f-three").toggleClass('active');
        $("#modal-fund-trn-multiple .f-four").toggleClass('active');
    });



    $('#modal-fund-trn-multiple').on('click', '#RecipientListButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-multiple .f-one").toggleClass('active');
        $("#modal-fund-trn-multiple .f-four").toggleClass('active');
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-fund-trn-multiple .modal-content").html(data);
        });
    });



    $('#modal-fund-trn-multiple').on('click', '#MAddRecipientButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $('.fund-trn-add-recipient form .multiple_trn_error').remove();
        $("#modal-fund-trn-multiple .f-three, #modal-fund-trn-multiple .f-one").toggleClass('active');
        //$("#modal-fund-trn-multiple .f-one").toggleClass('active');
        var numberExists = false;
        var detailInvalid = false;
        var Phone = $('#PhoneField').val();
        var Amount = $('.fund-trn-add-recipient .amtfield').val().replace(",", "");
        var DestinationPhone = $('#DestPhoneField').val();

        if (!DestinationPhone || !Amount || DestinationPhone.length < 10 || Amount.length < 1) {
            detailInvalid = true;
        }
        if (parseFloat(Amount) < 100) {
            $('.fund-trn-add-recipient form p').after('<div class="multiple_trn_error"><span style="color: #ff7070; font-weight: bold;">Amount must be at least N100</span></div>');
            $("#modal-fund-trn-multiple .f-three, #modal-fund-trn-multiple .f-one").toggleClass('active');
            return false;
        }
        if (detailInvalid) {
            $('.fund-trn-add-recipient form p').after('<div class="multiple_trn_error"><span style="color: #ff7070; font-weight: bold;">Phone Number / Amount is Invalid</span></div>');
            $("#modal-fund-trn-multiple .f-three, #modal-fund-trn-multiple .f-one").toggleClass('active');
            return false;
        }

        let itemsArray = localStorage.getItem(Phone) ? JSON.parse(localStorage.getItem(Phone)) : [];




        for (var item of itemsArray) {

            if (item.DestinationPhone === DestinationPhone) {

                numberExists = true;
                break;
            }
        }


        if (numberExists) {
            $('.fund-trn-add-recipient form p').after('<div class="multiple_trn_error"><span style="color: #ff7070; font-weight: bold;">Phone number already in the beneficiary list</span></div>');
            $("#modal-fund-trn-multiple .f-three, #modal-fund-trn-multiple .f-one").toggleClass('active');
            return false;
        }


        var Name = "UnKnown Recipient";


        $.ajax({
            type: "GET",
            url: "/Transaction/QueryRecipient",
            async: false,
            data: { DestinationPhone },
            success: function (response) {

                Name = response;
            }
        });

        var d = new Object();
        d.Amount = Amount;
        d.DestinationPhone = DestinationPhone;
        d.Name = Name;



        itemsArray.push(d);
        localStorage.setItem(Phone, JSON.stringify(itemsArray));
        var data = JSON.parse(localStorage.getItem(Phone));

        $('#DestPhoneField').val("");
        $('#AmtField').val("");
        var total = 0;
        $('#recipient-list-id .item').remove();
        data.forEach(item => {

            var nextId = data.indexOf(item);

            var gg = ` <div class="item">
                                    <div class="avater">
                                        <img src="/assets/img/png/avatar.png" alt="">
                                        <p>
                                            <strong>${item.Name}</strong>
                                           <span class="phone_number_tfr">${item.DestinationPhone}</span>
                                        </p>
                                    </div>
             <input class="form-control"  id="rows_${nextId}_Name" name="Recipients[${nextId}].DestinationPhone" type="hidden" value="${item.DestinationPhone}">
             <input class="form-control"  id="rows_${nextId}_Name" name="Recipients[${nextId}].Amount" type="hidden" value="${item.Amount}">
                                    <strong class="sum">&#8358;${parseFloat(item.Amount).toLocaleString()}</strong>
                                    <a class="btn btn-link delete-beneficiary">
                                        <i class="icon auto">
                                            <svg width="12" height="16" viewBox="0 0 12 16" fill="none"
                                                 xmlns="http://www.w3.org/2000/svg">
                                                <path d="M0.999349 13.8333C0.999349 14.75 1.74935 15.5 2.66602 15.5H9.33268C10.2494 15.5 10.9994 14.75 10.9994 13.8333V3.83333H0.999349V13.8333ZM3.04935 7.9L4.22435 6.725L5.99935 8.49167L7.76602 6.725L8.94102 7.9L7.17435 9.66667L8.94102 11.4333L7.76602 12.6083L5.99935 10.8417L4.23268 12.6083L3.05768 11.4333L4.82435 9.66667L3.04935 7.9ZM8.91602 1.33333L8.08268 0.5H3.91602L3.08268 1.33333H0.166016V3H11.8327V1.33333H8.91602Z"
                                                      fill="#FF7070" />
                                            </svg>
                                        </i>
                                    </a>
                                </div>`;


            $('#recipient-list-id div.bottom').before(gg);
            total += parseFloat(item.Amount);
        });

        $('#recipient-list-id div.bottom .sum').html("Total: <strong>&#8358;" + total.toLocaleString() + "</strong>");
        $('#recipient-list-id .count').html(data.length);

        //when lists is equal to 10, hide the add another button

        if (data.length > 10) {
            $('#recipient-list-id div.bottom .add-another').hide();
        };
        $('#RecipientListButton').removeClass('d-none');


        $("#modal-fund-trn-multiple .f-one").toggleClass('active');
        $("#modal-fund-trn-multiple .f-four").toggleClass('active');
    });




    $('#modal-fund-trn-multiple').on('click', '#MultiOTPButton', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin label.auth_pin_text").removeClass("errorColor");
        var valid = true;
        $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin .input-pin input[type='text']").each(function (e) {
            if (!$(this).val()) {
                $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin label.auth_pin_text").addClass("errorColor");
                valid = false;
                return false;
            }
        });
        if (valid) {
            $("#modal-fund-trn-multiple .form-section").toggleClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            $.post("Transaction/MultipleTransferOTPAuth", nform.serialize(), function (data) {
                $("#modal-fund-trn-multiple .modal-content").html(data);
            });
        }
    });



    $('#modal-fund-trn-multiple').on('click', '#MultiTAPButton', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin label.auth_pin_text").removeClass("errorColor");
        var valid = true;
        $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin .input-pin input[type='text']").each(function (e) {
            if (!$(this).val()) {
                $(this).parents(".m-content-wrap").find(".form-section.fund-trn-authpin label.auth_pin_text").addClass("errorColor");
                valid = false;
                return false;
            }
        });
        if (valid) {
            $("#modal-fund-trn-multiple .form-section").toggleClass('active');
            var clickedEle = $(this);
            var nform = clickedEle.closest('form');
            $.post("Transaction/MultipleTransferTAPAuth", nform.serialize(), function (data) {
                $("#modal-fund-trn-multiple .modal-content").html(data);
            });
        }
    });




    $('#modal-fund-trn-multiple').on('click', '#CompleteTAPTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-multiple .form-section").toggleClass('active');
        localStorage.clear();
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-fund-trn-multiple .modal-content").html(data);
        });
    });


    $('#modal-fund-trn-multiple').on('click', '#CompleteOTPTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();
        $("#modal-fund-trn-multiple .form-section").toggleClass('active');
        localStorage.clear();
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-fund-trn-multiple .modal-content").html(data);

        });
    });



    $('#modal-fund-trn-multiple').on('click', '#CompletePINTransfer', function (e) {

        e.preventDefault();
        e.stopPropagation();

        $("#modal-fund-trn-multiple .form-section").toggleClass('active');
        localStorage.clear();
        var clickedEle = $(this);
        var nform = clickedEle.closest('form');
        $.post(nform.attr("action"), nform.serialize(), function (data) {

            $("#modal-fund-trn-multiple .modal-content").html(data);
        });
    });

    //Start Code to repeat transaction

    $('.content.history').on('click', '.repeat_history_btn', function (e) {

        //debugger
        e.preventDefault();
        e.stopPropagation();

        var transId = $(this).data("itemid");
        $.ajax({
            type: 'GET',
            url: '/Transaction/RepeatTransaction',
            cache: false,
            data: {
                Id: transId,
            },
            success: function (data) {
                //debugger
                if (data.amount == null) {
                    $("#modal-fund-trn-single").modal('show');
                    $("#modal-fund-trn-single .modal-content").html(data);
                } else {
                    $("#modal-fund-trn-single").modal('hide');
                    $("#modal-fund-trn-single").removeClass('show');
                    $("#modal-fund-wallet").modal('show');
                    $('#modal-fund-wallet .form-card .form-section.loading').addClass("active");
                    $.ajax({
                        type: "GET",
                        url: "/Wallet/QueryCards",
                        async: false,
                        success: function (response) {
                            // 
                            $("#modal-fund-wallet .modal-content").html(response);
                            $("#modal-fund-wallet .modal-content .form-section.wallet-amount .fund_amount").val(data.amount);
                            $("#modal-fund-wallet .form-section.wallet-amount .fund_amount").keyup();
                            $(".form-section.wallet-amount .fund_amount.currency").each(function (index) {
                                $(this).attr("id", "cleave-wallet-amount-" + index);
                                var cleave = new Cleave("#cleave-wallet-amount-" + index, {
                                    numeral: true,
                                    numeralThousandsGroupStyle: "thousand",
                                    numeralPositiveOnly: true
                                });
                            });
                            $(".form-section.card-info input.credit-card").each(function (index) {
                                $(this).attr("id", "cleave-card-info-card-" + index);
                                var cleave = new Cleave("#cleave-card-info-card-" + index, {
                                    blocks: [4, 4, 4, 4, 3],
                                    numericOnly: true,
                                });
                            });
                            //Expiration
                            $(".form-section.card-info input.expire").each(function (index) {
                                $(this).attr("id", "cleave-card-info-expire-" + index);
                                var cleave = new Cleave("#cleave-card-info-expire-" + index, {
                                    date: true,
                                    datePattern: ["m", "Y"]
                                });
                            });
                            //CVV 
                            $(".form-section.card-info input.cvv").each(function (index) {
                                $(this).attr("id", "cleave-card-info-cvv-" + index);
                                var cleave = new Cleave("#cleave-card-info-cvv-" + index, {
                                    numeral: true,
                                    numeralThousandsGroupStyle: "none",
                                    numeralPositiveOnly: true,
                                    numeralDecimalScale: 0
                                });
                            });
                            /*if (data.cardId) {
                                $("#modal-fund-wallet .modal-content .form-card .form-section.wallet-amount .select-list .item input[value='" + data.cardId + "']").closest('.item').addClass('active');
                            }*/
                        }

                    });
                }
            }
        });
    });
    //End Code to repeat transaction
    var PassportURL = $(".passporturl").val();

    $("#pp").attr("style", "background-image: url('" + PassportURL + "')");

    $('#modal-fund-wallet').on('click', '#GoBackWalletButton', function (e) {

        $('#modal-fund-wallet .form-card .form-section').removeClass("active");
        $('#modal-fund-wallet .form-card .form-section.loading').addClass("active");


        $.get("/Transaction/GoBackWallet", function (data) {
            $("#modal-fund-wallet .modal-content").html(data);
        });
    });
    $('#modal-fund-trn-single').on('click', '#GoBackFundButton', function (e) {
        $('#modal-fund-trn-single .form-card .form-section.loading').addClass("active");
        $.get("/Transaction/GoBackFund", function (data) {
            $("#modal-fund-trn-single .modal-content").html(data);

        }).always(function () {
            var cleave = new Cleave("#TransactionModel_Amount", {
                numeral: true,
                numeralThousandsGroupStyle: "thousand"
            });
        });
    });
    $('#modal-fund-trn-multiple').on('click', '#GoBackUploadButton', function (e) {
        //debugger
        $('#modal-fund-trn-multiple .form-card .form-section.fund-trn-transpin').removeClass("active");
        $('#modal-fund-trn-multiple .form-card .form-section.loading').addClass("active");

        $.get("/Transaction/GoBackUpload", function (data) {
            // debugger
            $("#modal-fund-trn-multiple .modal-content").html(data);

            //}).always(function () {
            //    var cleave = new Cleave("#TransactionModel_Amount", {
            //        numeral: true,
            //        numeralThousandsGroupStyle: "thousand"
            //    });
        });
    });

    //$("#LoginButtonId").click(function (e) {
    //    debugger
    //    $('.auth .card .login').removeClass("active");
    //    $('.auth .card .loading').addClass("active");
    //})

    $("#LoginButtonId").click(function (e) {
        $('.auth .form-card .form-section.login').removeClass('active');
        $('.auth .form-card .form-section.loading').addClass('active');
    })

    $('#Reg-form-card').on('click', '.reg-success-btn', function (e) {
        // debugger
        $('#Reg-form-card-Resp').removeClass('active');
        $('.auth .form-card .form-section.loading').addClass('active');
    });

    $('#setting-auth-pin').on('submit', '#setauthpin', function (e) {
        // debugger;
        var p1 = $("#np1").val();
        var p2 = $("#np2").val();
        var p3 = $("#np3").val();
        var p4 = $("#np4").val();
        var p5 = $("#cp1").val();
        var p6 = $("#cp2").val();
        var p7 = $("#cp3").val();
        var p8 = $("#cp4").val();
        var letters = /^[a-zA-Z]+$/
        if (p1 == "" || p2 == "" || p3 == "" || p4 == "" || p5 == "" || p6 == "" || p7 == "" || p8 == "") {
            e.preventDefault();
            $(".invindicator").text("Four Numbers are required please fill all the boxes");
        } else if (p1 != p5 || p2 != p6 || p3 != p7 || p4 != p8) {

            e.preventDefault();
            $(".invindicator").text("New Pin and Comfirmation Pin doesn't match");

        } else if (p1.match(letters) || p2.match(letters) || p3.match(letters) || p4.match(letters) || p5.match(letters) || p6.match(letters) || p7.match(letters) || p8.match(letters)) {
            e.preventDefault();
            $(".invindicator").text("Please use numbers only");
        } else {
            $(".invindicator").text("");
        }

    });

    $('#setting-transaction-pin').on('submit', '#settranspin', function (e) {
        // debugger;
        var p1 = $("#np1").val();
        var p2 = $("#np2").val();
        var p3 = $("#np3").val();
        var p4 = $("#np4").val();
        var p5 = $("#cp1").val();
        var p6 = $("#cp2").val();
        var p7 = $("#cp3").val();
        var p8 = $("#cp4").val();
        var letters = /^[a-zA-Z]+$/
        if (p1 == "" || p2 == "" || p3 == "" || p4 == "" || p5 == "" || p6 == "" || p7 == "" || p8 == "") {
            e.preventDefault();
            $(".invindicator").text("Four Numbers are required please fill all the boxes");
        } else if (p1 != p5 || p2 != p6 || p3 != p7 || p4 != p8) {

            e.preventDefault();
            $(".invindicator").text("New Pin and Comfirmation Pin doesn't match");

        } else if (p1.match(letters) || p2.match(letters) || p3.match(letters) || p4.match(letters) || p5.match(letters) || p6.match(letters) || p7.match(letters) || p8.match(letters)) {
            e.preventDefault();
            $(".invindicator").text("Please use numbers only");
        } else {
            $(".invindicator").text("");
        }

    });
    $('#setting-transpin-setup').on('submit', '#newusertranssetup', function (e) {
        // debugger;
        var p1 = $("#nnp1").val();
        var p2 = $("#nnp2").val();
        var p3 = $("#nnp3").val();
        var p4 = $("#nnp4").val();
        var p5 = $("#ncp1").val();
        var p6 = $("#ncp2").val();
        var p7 = $("#ncp3").val();
        var p8 = $("#ncp4").val();
        var letters = /^[a-zA-Z]+$/
        if (p1 == "" || p2 == "" || p3 == "" || p4 == "" || p5 == "" || p6 == "" || p7 == "" || p8 == "") {
            e.preventDefault();
            $(".invindicator2").text("Four Numbers are required please fill all the boxes");
        } else if (p1 != p5 || p2 != p6 || p3 != p7 || p4 != p8) {

            e.preventDefault();
            $(".invindicator2").text("New Pin and Comfirmation Pin doesn't match");

        } else if (p1.match(letters) || p2.match(letters) || p3.match(letters) || p4.match(letters) || p5.match(letters) || p6.match(letters) || p7.match(letters) || p8.match(letters)) {
            e.preventDefault();
            $(".invindicator2").text("Please use numbers only");
        } else {
            $(".invindicator2").text("");
        }

    });
});

function formatSize(byte) {
    if (byte > 0 && byte < 1000) {
        return byte + "Byte";
    }
    else if (byte >= 1000 && byte < 1000000) {
        return byte / 1000 + "kb";
    }
    else if (byte >= 1000000) {
        return byte / 1000000 + "mb";
    }
    else {
        return "";
    }
}

function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

function setSettingActive() {

    //Load Set Active Form
    var _activePage = getUrlVars()['p'];
    if (_activePage) {
        //Set Nav Active
        $(".settings .category-nav a").removeClass("active");
        $(".settings .category-nav a").each(function (e) {
            if ($(this).attr("href").includes(_activePage)) {
                $(this).addClass("active");
                return;
            }
        })

        //Set Page Active
        $(".settings .setting-content").hide();
        $(".settings .setting-sect").removeClass("active");
        setTimeout(function () {
            // debugger
            $(".settings .setting-sect#setting-" + _activePage).addClass("active");
            $(".settings .loading").hide();
            $(".settings .setting-content").show();
        }, 2000)

        //Scroll to Tab 
        if ($(window).width() <= mPoint) {
            var _left = $(".settings .category-nav a.active").offset().left - 45;
            $(".settings .category-nav-wrap").animate({
                scrollLeft: _left
            });
        }
    }
    else {
        $(".settings .setting-content").hide();
        $(".settings .setting-sect").removeClass("active");
        setTimeout(function () {
            $(".settings .setting-sect:first-child").addClass("active");
            $(".settings .loading").hide();
            $(".settings .setting-content").show();
        }, 2000)
    }
}

function setFormPosition() {
    if ($(window).width() > mPoint && $(".page > header .links").length > 0) {
        var left = $(".page > header .container").width();

        console.log($(window).width(), left);
        $(".home .auth").css("right", ($(window).width() - left) / 2);
    }
}

function setBgPosition() {
    if ($(window).width() > mPoint && $(".page > header .links").length > 0) {
        var left = $(".page > header .logo").offset().left;
        $("section.image .cover").css("width", left);
    }
}

//function loadCharts() {

//    if ($(".overview .usage-card").length > 0) {

//        var quantity;

//        $.ajax({
//            type: "GET",
//            url: "/Home/GetDailyChatData",
//            async: false,
//            success: function (response) {

//                quantity = response.quantity;
//            }

//        });


//        if (quantity[0] === 0 && quantity[1] === 0 ) {

//          $('.overview .usage-card').html('<h6>No Transaction Data</h6>');
//      }
//      else {


//          //Globals
//          Chart.defaults.global.defaultFontFamily = 'Muli';
//          var _opt = {
//              responsive: true,
//              maintainAspectRatio: true,
//              cutoutPercentage: 25,
//              legend: {
//                  display: false
//              },
//              title: {
//                  display: false,
//              },
//          }
//          //Pie
//          new Chart(document.getElementById("usage-doughnut-ct"), {
//              type: 'doughnut',
//              data: {
//                  labels: ["Fund Transfer", "Fund Wallet"],//, "Bills Payment"],
//                  datasets: [
//                      {
//                          label: "Transactions",
//                          backgroundColor: ["#6AC895", "#FF7070"],//, "#FBB700"],
//                          data: quantity
//                      },
//                  ]
//              },
//              options: _opt
//          });
//      }
//  }

//}

function formatInput() {
    //Credit Cards 
    $("form input.credit-card").each(function (index) {
        $(this).attr("id", "cleave-card-" + index);
        var cleave = new Cleave("#cleave-card-" + index, {
            blocks: [4, 4, 4, 4, 3],
            numericOnly: true,
        });
    });
    //Dates
    $("form input.date").each(function (index) {
        //console.log($(this).get(0));
        $(this).attr("id", "cleave-date-" + index);
        var cleave = new Cleave("#cleave-date-" + index, {
            date: true,
            datePattern: ["d", "m", "Y"]
        });
    });
    //Expiration
    $("form input.expire").each(function (index) {
        $(this).attr("id", "cleave-expire-" + index);
        var cleave = new Cleave("#cleave-expire-" + index, {
            date: true,
            datePattern: ["m", "Y"]
        });
    });

    //Phone 
    $("form input.tel").each(function (index) {
        $(this).attr("id", "cleave-tel-" + index);
        var cleave = new Cleave("#cleave-tel-" + index, {
            blocks: [4, 3, 4],
        });
    });

    //Currency 
    $("form input.currency").each(function (index) {
        $(this).attr("id", "cleave-currency-" + index);
        var cleave = new Cleave("#cleave-currency-" + index, {
            numeral: true,
            numeralThousandsGroupStyle: "thousand",
            numeralPositiveOnly: true
        });
    });

    //CVV 
    $("form input.cvv").each(function (index) {
        $(this).attr("id", "cleave-cvv-" + index);
        var cleave = new Cleave("#cleave-cvv-" + index, {
            numeral: true,
            numeralThousandsGroupStyle: "none",
            numeralPositiveOnly: true,
            numeralDecimalScale: 0
        });
    });

}
function checkPasswordPolicy(password, input) {
    var score = 0;
    var checker = $(input).siblings(".checker");
    $(checker).find(".item").removeClass("checked");

    if (password && password.length >= 8) {
        $(checker).find(".item:nth-child(1)").addClass("checked");
        score++;
    }
    else {
        $(checker).find(".item:nth-child(1)").removeClass("checked");
        score--;
    }

    if (password && password.match(/[a-z]/)) {
        $(checker).find(".item:nth-child(2)").addClass("checked");
        score++;
    }
    else {
        $(checker).find(".item:nth-child(2)").removeClass("checked");
        score--;
    }

    if (password && password.match(/\d+/)) {
        $(checker).find(".item:nth-child(3)").addClass("checked");
        score++;
    }
    else {
        $(checker).find(".item:nth-child(3)").removeClass("checked");
        score--;
    }

    // If the password length is greater than 8 and must contain alphabets,numbers and special characters
    if (password && password.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/)) {
        $(checker).find(".item:nth-child(4)").addClass("checked");
        score++;
    }
    else {
        $(checker).find(".item:nth-child(4)").removeClass("checked");
        score--;
    }

    if (score == 4) {
        $(input).attr("data-valid", "true");
    } else {
        $(input).removeAttr("data-valid");
    }

}


//var cleave = new Cleave("#examdate", {
//    date: true,
//    datePattern: ["d", "m", "Y"]
//});

//$('#create-account-profile').on('submit', '#signupsetup', function (e) {
//    debugger;
//    var p1 = $("#signupdob").val();
//    var dob= Date.parse(p1);


//    if (dob > Date.now()) {
//        e.preventDefault();
//        $(".invindicator3").text("you entered an invalid date of birth,please check and retry");
//    } 

//});

//$('section.auth').on('click', '#resend-btn', function (e) {


//});



